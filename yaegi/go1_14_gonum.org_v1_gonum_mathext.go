// Code generated by 'goexports gonum.org/v1/gonum/mathext'. DO NOT EDIT.

// Copyright Â©2019 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build go1.14,!go1.15

package yaegi

import (
	"reflect"

	"gonum.org/v1/gonum/mathext"
)

func init() {
	Symbols["gonum.org/v1/gonum/mathext"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AiryAi":             reflect.ValueOf(mathext.AiryAi),
		"AiryAiDeriv":        reflect.ValueOf(mathext.AiryAiDeriv),
		"Beta":               reflect.ValueOf(mathext.Beta),
		"CompleteB":          reflect.ValueOf(mathext.CompleteB),
		"CompleteD":          reflect.ValueOf(mathext.CompleteD),
		"CompleteE":          reflect.ValueOf(mathext.CompleteE),
		"CompleteK":          reflect.ValueOf(mathext.CompleteK),
		"Digamma":            reflect.ValueOf(mathext.Digamma),
		"EllipticE":          reflect.ValueOf(mathext.EllipticE),
		"EllipticF":          reflect.ValueOf(mathext.EllipticF),
		"EllipticRD":         reflect.ValueOf(mathext.EllipticRD),
		"EllipticRF":         reflect.ValueOf(mathext.EllipticRF),
		"GammaIncReg":        reflect.ValueOf(mathext.GammaIncReg),
		"GammaIncRegComp":    reflect.ValueOf(mathext.GammaIncRegComp),
		"GammaIncRegCompInv": reflect.ValueOf(mathext.GammaIncRegCompInv),
		"GammaIncRegInv":     reflect.ValueOf(mathext.GammaIncRegInv),
		"InvRegIncBeta":      reflect.ValueOf(mathext.InvRegIncBeta),
		"Lbeta":              reflect.ValueOf(mathext.Lbeta),
		"MvLgamma":           reflect.ValueOf(mathext.MvLgamma),
		"NormalQuantile":     reflect.ValueOf(mathext.NormalQuantile),
		"RegIncBeta":         reflect.ValueOf(mathext.RegIncBeta),
		"Zeta":               reflect.ValueOf(mathext.Zeta),
	}
}
