// Code generated by 'github.com/containous/yaegi/extract gonum.org/v1/gonum/blas'. DO NOT EDIT.

// Copyright Â©2019 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build go1.15,!go1.16

package yaegi

import (
	"reflect"

	"gonum.org/v1/gonum/blas"
)

func init() {
	Symbols["gonum.org/v1/gonum/blas"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"All":         reflect.ValueOf(blas.All),
		"ConjTrans":   reflect.ValueOf(blas.ConjTrans),
		"Diagonal":    reflect.ValueOf(blas.Diagonal),
		"Identity":    reflect.ValueOf(blas.Identity),
		"Left":        reflect.ValueOf(blas.Left),
		"Lower":       reflect.ValueOf(blas.Lower),
		"NoTrans":     reflect.ValueOf(blas.NoTrans),
		"NonUnit":     reflect.ValueOf(blas.NonUnit),
		"OffDiagonal": reflect.ValueOf(blas.OffDiagonal),
		"Rescaling":   reflect.ValueOf(blas.Rescaling),
		"Right":       reflect.ValueOf(blas.Right),
		"Trans":       reflect.ValueOf(blas.Trans),
		"Unit":        reflect.ValueOf(blas.Unit),
		"Upper":       reflect.ValueOf(blas.Upper),

		// type definitions
		"Complex128":       reflect.ValueOf((*blas.Complex128)(nil)),
		"Complex128Level1": reflect.ValueOf((*blas.Complex128Level1)(nil)),
		"Complex128Level2": reflect.ValueOf((*blas.Complex128Level2)(nil)),
		"Complex128Level3": reflect.ValueOf((*blas.Complex128Level3)(nil)),
		"Complex64":        reflect.ValueOf((*blas.Complex64)(nil)),
		"Complex64Level1":  reflect.ValueOf((*blas.Complex64Level1)(nil)),
		"Complex64Level2":  reflect.ValueOf((*blas.Complex64Level2)(nil)),
		"Complex64Level3":  reflect.ValueOf((*blas.Complex64Level3)(nil)),
		"Diag":             reflect.ValueOf((*blas.Diag)(nil)),
		"DrotmParams":      reflect.ValueOf((*blas.DrotmParams)(nil)),
		"Flag":             reflect.ValueOf((*blas.Flag)(nil)),
		"Float32":          reflect.ValueOf((*blas.Float32)(nil)),
		"Float32Level1":    reflect.ValueOf((*blas.Float32Level1)(nil)),
		"Float32Level2":    reflect.ValueOf((*blas.Float32Level2)(nil)),
		"Float32Level3":    reflect.ValueOf((*blas.Float32Level3)(nil)),
		"Float64":          reflect.ValueOf((*blas.Float64)(nil)),
		"Float64Level1":    reflect.ValueOf((*blas.Float64Level1)(nil)),
		"Float64Level2":    reflect.ValueOf((*blas.Float64Level2)(nil)),
		"Float64Level3":    reflect.ValueOf((*blas.Float64Level3)(nil)),
		"Side":             reflect.ValueOf((*blas.Side)(nil)),
		"SrotmParams":      reflect.ValueOf((*blas.SrotmParams)(nil)),
		"Transpose":        reflect.ValueOf((*blas.Transpose)(nil)),
		"Uplo":             reflect.ValueOf((*blas.Uplo)(nil)),

		// interface wrapper definitions
		"_Complex128":       reflect.ValueOf((*_gonum_org_v1_gonum_blas_Complex128)(nil)),
		"_Complex128Level1": reflect.ValueOf((*_gonum_org_v1_gonum_blas_Complex128Level1)(nil)),
		"_Complex128Level2": reflect.ValueOf((*_gonum_org_v1_gonum_blas_Complex128Level2)(nil)),
		"_Complex128Level3": reflect.ValueOf((*_gonum_org_v1_gonum_blas_Complex128Level3)(nil)),
		"_Complex64":        reflect.ValueOf((*_gonum_org_v1_gonum_blas_Complex64)(nil)),
		"_Complex64Level1":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_Complex64Level1)(nil)),
		"_Complex64Level2":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_Complex64Level2)(nil)),
		"_Complex64Level3":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_Complex64Level3)(nil)),
		"_Float32":          reflect.ValueOf((*_gonum_org_v1_gonum_blas_Float32)(nil)),
		"_Float32Level1":    reflect.ValueOf((*_gonum_org_v1_gonum_blas_Float32Level1)(nil)),
		"_Float32Level2":    reflect.ValueOf((*_gonum_org_v1_gonum_blas_Float32Level2)(nil)),
		"_Float32Level3":    reflect.ValueOf((*_gonum_org_v1_gonum_blas_Float32Level3)(nil)),
		"_Float64":          reflect.ValueOf((*_gonum_org_v1_gonum_blas_Float64)(nil)),
		"_Float64Level1":    reflect.ValueOf((*_gonum_org_v1_gonum_blas_Float64Level1)(nil)),
		"_Float64Level2":    reflect.ValueOf((*_gonum_org_v1_gonum_blas_Float64Level2)(nil)),
		"_Float64Level3":    reflect.ValueOf((*_gonum_org_v1_gonum_blas_Float64Level3)(nil)),
	}
}

// _gonum_org_v1_gonum_blas_Complex128 is an interface wrapper for Complex128 type
type _gonum_org_v1_gonum_blas_Complex128 struct {
	WDzasum func(n int, x []complex128, incX int) float64
	WDznrm2 func(n int, x []complex128, incX int) float64
	WIzamax func(n int, x []complex128, incX int) int
	WZaxpy  func(n int, alpha complex128, x []complex128, incX int, y []complex128, incY int)
	WZcopy  func(n int, x []complex128, incX int, y []complex128, incY int)
	WZdotc  func(n int, x []complex128, incX int, y []complex128, incY int) (dotc complex128)
	WZdotu  func(n int, x []complex128, incX int, y []complex128, incY int) (dotu complex128)
	WZdscal func(n int, alpha float64, x []complex128, incX int)
	WZgbmv  func(tA blas.Transpose, m int, n int, kL int, kU int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZgemm  func(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
	WZgemv  func(tA blas.Transpose, m int, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZgerc  func(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
	WZgeru  func(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
	WZhbmv  func(ul blas.Uplo, n int, k int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZhemm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
	WZhemv  func(ul blas.Uplo, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZher   func(ul blas.Uplo, n int, alpha float64, x []complex128, incX int, a []complex128, lda int)
	WZher2  func(ul blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
	WZher2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta float64, c []complex128, ldc int)
	WZherk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []complex128, lda int, beta float64, c []complex128, ldc int)
	WZhpmv  func(ul blas.Uplo, n int, alpha complex128, ap []complex128, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZhpr   func(ul blas.Uplo, n int, alpha float64, x []complex128, incX int, a []complex128)
	WZhpr2  func(ul blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, ap []complex128)
	WZscal  func(n int, alpha complex128, x []complex128, incX int)
	WZswap  func(n int, x []complex128, incX int, y []complex128, incY int)
	WZsymm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
	WZsyr2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
	WZsyrk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, beta complex128, c []complex128, ldc int)
	WZtbmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex128, lda int, x []complex128, incX int)
	WZtbsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex128, lda int, x []complex128, incX int)
	WZtpmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex128, x []complex128, incX int)
	WZtpsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex128, x []complex128, incX int)
	WZtrmm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int)
	WZtrmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex128, lda int, x []complex128, incX int)
	WZtrsm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int)
	WZtrsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex128, lda int, x []complex128, incX int)
}

func (W _gonum_org_v1_gonum_blas_Complex128) Dzasum(n int, x []complex128, incX int) float64 {
	return W.WDzasum(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Dznrm2(n int, x []complex128, incX int) float64 {
	return W.WDznrm2(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Izamax(n int, x []complex128, incX int) int {
	return W.WIzamax(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zaxpy(n int, alpha complex128, x []complex128, incX int, y []complex128, incY int) {
	W.WZaxpy(n, alpha, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zcopy(n int, x []complex128, incX int, y []complex128, incY int) {
	W.WZcopy(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zdotc(n int, x []complex128, incX int, y []complex128, incY int) (dotc complex128) {
	return W.WZdotc(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zdotu(n int, x []complex128, incX int, y []complex128, incY int) (dotu complex128) {
	return W.WZdotu(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zdscal(n int, alpha float64, x []complex128, incX int) {
	W.WZdscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zgbmv(tA blas.Transpose, m int, n int, kL int, kU int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZgbmv(tA, m, n, kL, kU, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zgemv(tA blas.Transpose, m int, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZgemv(tA, m, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zgerc(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int) {
	W.WZgerc(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zgeru(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int) {
	W.WZgeru(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zhbmv(ul blas.Uplo, n int, k int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZhbmv(ul, n, k, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zhemm(s blas.Side, ul blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZhemm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zhemv(ul blas.Uplo, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZhemv(ul, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zher(ul blas.Uplo, n int, alpha float64, x []complex128, incX int, a []complex128, lda int) {
	W.WZher(ul, n, alpha, x, incX, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zher2(ul blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int) {
	W.WZher2(ul, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zher2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta float64, c []complex128, ldc int) {
	W.WZher2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zherk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []complex128, lda int, beta float64, c []complex128, ldc int) {
	W.WZherk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zhpmv(ul blas.Uplo, n int, alpha complex128, ap []complex128, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZhpmv(ul, n, alpha, ap, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zhpr(ul blas.Uplo, n int, alpha float64, x []complex128, incX int, a []complex128) {
	W.WZhpr(ul, n, alpha, x, incX, a)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zhpr2(ul blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, ap []complex128) {
	W.WZhpr2(ul, n, alpha, x, incX, y, incY, ap)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zscal(n int, alpha complex128, x []complex128, incX int) {
	W.WZscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zswap(n int, x []complex128, incX int, y []complex128, incY int) {
	W.WZswap(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zsymm(s blas.Side, ul blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZsymm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zsyr2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZsyr2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Zsyrk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, beta complex128, c []complex128, ldc int) {
	W.WZsyrk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Ztbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtbmv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Ztbsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtbsv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Ztpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex128, x []complex128, incX int) {
	W.WZtpmv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Ztpsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex128, x []complex128, incX int) {
	W.WZtpsv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Ztrmm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int) {
	W.WZtrmm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Ztrmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtrmv(ul, tA, d, n, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Ztrsm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int) {
	W.WZtrsm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Complex128) Ztrsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtrsv(ul, tA, d, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_Complex128Level1 is an interface wrapper for Complex128Level1 type
type _gonum_org_v1_gonum_blas_Complex128Level1 struct {
	WDzasum func(n int, x []complex128, incX int) float64
	WDznrm2 func(n int, x []complex128, incX int) float64
	WIzamax func(n int, x []complex128, incX int) int
	WZaxpy  func(n int, alpha complex128, x []complex128, incX int, y []complex128, incY int)
	WZcopy  func(n int, x []complex128, incX int, y []complex128, incY int)
	WZdotc  func(n int, x []complex128, incX int, y []complex128, incY int) (dotc complex128)
	WZdotu  func(n int, x []complex128, incX int, y []complex128, incY int) (dotu complex128)
	WZdscal func(n int, alpha float64, x []complex128, incX int)
	WZscal  func(n int, alpha complex128, x []complex128, incX int)
	WZswap  func(n int, x []complex128, incX int, y []complex128, incY int)
}

func (W _gonum_org_v1_gonum_blas_Complex128Level1) Dzasum(n int, x []complex128, incX int) float64 {
	return W.WDzasum(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level1) Dznrm2(n int, x []complex128, incX int) float64 {
	return W.WDznrm2(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level1) Izamax(n int, x []complex128, incX int) int {
	return W.WIzamax(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level1) Zaxpy(n int, alpha complex128, x []complex128, incX int, y []complex128, incY int) {
	W.WZaxpy(n, alpha, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level1) Zcopy(n int, x []complex128, incX int, y []complex128, incY int) {
	W.WZcopy(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level1) Zdotc(n int, x []complex128, incX int, y []complex128, incY int) (dotc complex128) {
	return W.WZdotc(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level1) Zdotu(n int, x []complex128, incX int, y []complex128, incY int) (dotu complex128) {
	return W.WZdotu(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level1) Zdscal(n int, alpha float64, x []complex128, incX int) {
	W.WZdscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level1) Zscal(n int, alpha complex128, x []complex128, incX int) {
	W.WZscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level1) Zswap(n int, x []complex128, incX int, y []complex128, incY int) {
	W.WZswap(n, x, incX, y, incY)
}

// _gonum_org_v1_gonum_blas_Complex128Level2 is an interface wrapper for Complex128Level2 type
type _gonum_org_v1_gonum_blas_Complex128Level2 struct {
	WZgbmv func(tA blas.Transpose, m int, n int, kL int, kU int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZgemv func(tA blas.Transpose, m int, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZgerc func(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
	WZgeru func(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
	WZhbmv func(ul blas.Uplo, n int, k int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZhemv func(ul blas.Uplo, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZher  func(ul blas.Uplo, n int, alpha float64, x []complex128, incX int, a []complex128, lda int)
	WZher2 func(ul blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
	WZhpmv func(ul blas.Uplo, n int, alpha complex128, ap []complex128, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZhpr  func(ul blas.Uplo, n int, alpha float64, x []complex128, incX int, a []complex128)
	WZhpr2 func(ul blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, ap []complex128)
	WZtbmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex128, lda int, x []complex128, incX int)
	WZtbsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex128, lda int, x []complex128, incX int)
	WZtpmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex128, x []complex128, incX int)
	WZtpsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex128, x []complex128, incX int)
	WZtrmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex128, lda int, x []complex128, incX int)
	WZtrsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex128, lda int, x []complex128, incX int)
}

func (W _gonum_org_v1_gonum_blas_Complex128Level2) Zgbmv(tA blas.Transpose, m int, n int, kL int, kU int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZgbmv(tA, m, n, kL, kU, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Zgemv(tA blas.Transpose, m int, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZgemv(tA, m, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Zgerc(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int) {
	W.WZgerc(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Zgeru(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int) {
	W.WZgeru(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Zhbmv(ul blas.Uplo, n int, k int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZhbmv(ul, n, k, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Zhemv(ul blas.Uplo, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZhemv(ul, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Zher(ul blas.Uplo, n int, alpha float64, x []complex128, incX int, a []complex128, lda int) {
	W.WZher(ul, n, alpha, x, incX, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Zher2(ul blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int) {
	W.WZher2(ul, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Zhpmv(ul blas.Uplo, n int, alpha complex128, ap []complex128, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZhpmv(ul, n, alpha, ap, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Zhpr(ul blas.Uplo, n int, alpha float64, x []complex128, incX int, a []complex128) {
	W.WZhpr(ul, n, alpha, x, incX, a)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Zhpr2(ul blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, ap []complex128) {
	W.WZhpr2(ul, n, alpha, x, incX, y, incY, ap)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Ztbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtbmv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Ztbsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtbsv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Ztpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex128, x []complex128, incX int) {
	W.WZtpmv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Ztpsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex128, x []complex128, incX int) {
	W.WZtpsv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Ztrmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtrmv(ul, tA, d, n, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level2) Ztrsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtrsv(ul, tA, d, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_Complex128Level3 is an interface wrapper for Complex128Level3 type
type _gonum_org_v1_gonum_blas_Complex128Level3 struct {
	WZgemm  func(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
	WZhemm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
	WZher2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta float64, c []complex128, ldc int)
	WZherk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []complex128, lda int, beta float64, c []complex128, ldc int)
	WZsymm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
	WZsyr2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
	WZsyrk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, beta complex128, c []complex128, ldc int)
	WZtrmm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int)
	WZtrsm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int)
}

func (W _gonum_org_v1_gonum_blas_Complex128Level3) Zgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level3) Zhemm(s blas.Side, ul blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZhemm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level3) Zher2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta float64, c []complex128, ldc int) {
	W.WZher2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level3) Zherk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []complex128, lda int, beta float64, c []complex128, ldc int) {
	W.WZherk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level3) Zsymm(s blas.Side, ul blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZsymm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level3) Zsyr2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZsyr2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level3) Zsyrk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, beta complex128, c []complex128, ldc int) {
	W.WZsyrk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level3) Ztrmm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int) {
	W.WZtrmm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Complex128Level3) Ztrsm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int) {
	W.WZtrsm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}

// _gonum_org_v1_gonum_blas_Complex64 is an interface wrapper for Complex64 type
type _gonum_org_v1_gonum_blas_Complex64 struct {
	WCaxpy  func(n int, alpha complex64, x []complex64, incX int, y []complex64, incY int)
	WCcopy  func(n int, x []complex64, incX int, y []complex64, incY int)
	WCdotc  func(n int, x []complex64, incX int, y []complex64, incY int) (dotc complex64)
	WCdotu  func(n int, x []complex64, incX int, y []complex64, incY int) (dotu complex64)
	WCgbmv  func(tA blas.Transpose, m int, n int, kL int, kU int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
	WCgemm  func(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int)
	WCgemv  func(tA blas.Transpose, m int, n int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
	WCgerc  func(m int, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int)
	WCgeru  func(m int, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int)
	WChbmv  func(ul blas.Uplo, n int, k int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
	WChemm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int)
	WChemv  func(ul blas.Uplo, n int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
	WCher   func(ul blas.Uplo, n int, alpha float32, x []complex64, incX int, a []complex64, lda int)
	WCher2  func(ul blas.Uplo, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int)
	WCher2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta float32, c []complex64, ldc int)
	WCherk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []complex64, lda int, beta float32, c []complex64, ldc int)
	WChpmv  func(ul blas.Uplo, n int, alpha complex64, ap []complex64, x []complex64, incX int, beta complex64, y []complex64, incY int)
	WChpr   func(ul blas.Uplo, n int, alpha float32, x []complex64, incX int, a []complex64)
	WChpr2  func(ul blas.Uplo, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, ap []complex64)
	WCscal  func(n int, alpha complex64, x []complex64, incX int)
	WCsscal func(n int, alpha float32, x []complex64, incX int)
	WCswap  func(n int, x []complex64, incX int, y []complex64, incY int)
	WCsymm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int)
	WCsyr2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int)
	WCsyrk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, beta complex64, c []complex64, ldc int)
	WCtbmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex64, lda int, x []complex64, incX int)
	WCtbsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex64, lda int, x []complex64, incX int)
	WCtpmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex64, x []complex64, incX int)
	WCtpsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex64, x []complex64, incX int)
	WCtrmm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int)
	WCtrmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex64, lda int, x []complex64, incX int)
	WCtrsm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int)
	WCtrsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex64, lda int, x []complex64, incX int)
	WIcamax func(n int, x []complex64, incX int) int
	WScasum func(n int, x []complex64, incX int) float32
	WScnrm2 func(n int, x []complex64, incX int) float32
}

func (W _gonum_org_v1_gonum_blas_Complex64) Caxpy(n int, alpha complex64, x []complex64, incX int, y []complex64, incY int) {
	W.WCaxpy(n, alpha, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Ccopy(n int, x []complex64, incX int, y []complex64, incY int) {
	W.WCcopy(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cdotc(n int, x []complex64, incX int, y []complex64, incY int) (dotc complex64) {
	return W.WCdotc(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cdotu(n int, x []complex64, incX int, y []complex64, incY int) (dotu complex64) {
	return W.WCdotu(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cgbmv(tA blas.Transpose, m int, n int, kL int, kU int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int) {
	W.WCgbmv(tA, m, n, kL, kU, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int) {
	W.WCgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cgemv(tA blas.Transpose, m int, n int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int) {
	W.WCgemv(tA, m, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cgerc(m int, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int) {
	W.WCgerc(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cgeru(m int, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int) {
	W.WCgeru(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Chbmv(ul blas.Uplo, n int, k int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int) {
	W.WChbmv(ul, n, k, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Chemm(s blas.Side, ul blas.Uplo, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int) {
	W.WChemm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Chemv(ul blas.Uplo, n int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int) {
	W.WChemv(ul, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cher(ul blas.Uplo, n int, alpha float32, x []complex64, incX int, a []complex64, lda int) {
	W.WCher(ul, n, alpha, x, incX, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cher2(ul blas.Uplo, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int) {
	W.WCher2(ul, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cher2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta float32, c []complex64, ldc int) {
	W.WCher2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cherk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []complex64, lda int, beta float32, c []complex64, ldc int) {
	W.WCherk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Chpmv(ul blas.Uplo, n int, alpha complex64, ap []complex64, x []complex64, incX int, beta complex64, y []complex64, incY int) {
	W.WChpmv(ul, n, alpha, ap, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Chpr(ul blas.Uplo, n int, alpha float32, x []complex64, incX int, a []complex64) {
	W.WChpr(ul, n, alpha, x, incX, a)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Chpr2(ul blas.Uplo, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, ap []complex64) {
	W.WChpr2(ul, n, alpha, x, incX, y, incY, ap)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cscal(n int, alpha complex64, x []complex64, incX int) {
	W.WCscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Csscal(n int, alpha float32, x []complex64, incX int) {
	W.WCsscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Cswap(n int, x []complex64, incX int, y []complex64, incY int) {
	W.WCswap(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Csymm(s blas.Side, ul blas.Uplo, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int) {
	W.WCsymm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Csyr2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int) {
	W.WCsyr2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Csyrk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, beta complex64, c []complex64, ldc int) {
	W.WCsyrk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Ctbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex64, lda int, x []complex64, incX int) {
	W.WCtbmv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Ctbsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex64, lda int, x []complex64, incX int) {
	W.WCtbsv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Ctpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex64, x []complex64, incX int) {
	W.WCtpmv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Ctpsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex64, x []complex64, incX int) {
	W.WCtpsv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Ctrmm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int) {
	W.WCtrmm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Ctrmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex64, lda int, x []complex64, incX int) {
	W.WCtrmv(ul, tA, d, n, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Ctrsm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int) {
	W.WCtrsm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Ctrsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex64, lda int, x []complex64, incX int) {
	W.WCtrsv(ul, tA, d, n, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Icamax(n int, x []complex64, incX int) int {
	return W.WIcamax(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Scasum(n int, x []complex64, incX int) float32 {
	return W.WScasum(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64) Scnrm2(n int, x []complex64, incX int) float32 {
	return W.WScnrm2(n, x, incX)
}

// _gonum_org_v1_gonum_blas_Complex64Level1 is an interface wrapper for Complex64Level1 type
type _gonum_org_v1_gonum_blas_Complex64Level1 struct {
	WCaxpy  func(n int, alpha complex64, x []complex64, incX int, y []complex64, incY int)
	WCcopy  func(n int, x []complex64, incX int, y []complex64, incY int)
	WCdotc  func(n int, x []complex64, incX int, y []complex64, incY int) (dotc complex64)
	WCdotu  func(n int, x []complex64, incX int, y []complex64, incY int) (dotu complex64)
	WCscal  func(n int, alpha complex64, x []complex64, incX int)
	WCsscal func(n int, alpha float32, x []complex64, incX int)
	WCswap  func(n int, x []complex64, incX int, y []complex64, incY int)
	WIcamax func(n int, x []complex64, incX int) int
	WScasum func(n int, x []complex64, incX int) float32
	WScnrm2 func(n int, x []complex64, incX int) float32
}

func (W _gonum_org_v1_gonum_blas_Complex64Level1) Caxpy(n int, alpha complex64, x []complex64, incX int, y []complex64, incY int) {
	W.WCaxpy(n, alpha, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level1) Ccopy(n int, x []complex64, incX int, y []complex64, incY int) {
	W.WCcopy(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level1) Cdotc(n int, x []complex64, incX int, y []complex64, incY int) (dotc complex64) {
	return W.WCdotc(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level1) Cdotu(n int, x []complex64, incX int, y []complex64, incY int) (dotu complex64) {
	return W.WCdotu(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level1) Cscal(n int, alpha complex64, x []complex64, incX int) {
	W.WCscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level1) Csscal(n int, alpha float32, x []complex64, incX int) {
	W.WCsscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level1) Cswap(n int, x []complex64, incX int, y []complex64, incY int) {
	W.WCswap(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level1) Icamax(n int, x []complex64, incX int) int {
	return W.WIcamax(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level1) Scasum(n int, x []complex64, incX int) float32 {
	return W.WScasum(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level1) Scnrm2(n int, x []complex64, incX int) float32 {
	return W.WScnrm2(n, x, incX)
}

// _gonum_org_v1_gonum_blas_Complex64Level2 is an interface wrapper for Complex64Level2 type
type _gonum_org_v1_gonum_blas_Complex64Level2 struct {
	WCgbmv func(tA blas.Transpose, m int, n int, kL int, kU int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
	WCgemv func(tA blas.Transpose, m int, n int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
	WCgerc func(m int, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int)
	WCgeru func(m int, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int)
	WChbmv func(ul blas.Uplo, n int, k int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
	WChemv func(ul blas.Uplo, n int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
	WCher  func(ul blas.Uplo, n int, alpha float32, x []complex64, incX int, a []complex64, lda int)
	WCher2 func(ul blas.Uplo, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int)
	WChpmv func(ul blas.Uplo, n int, alpha complex64, ap []complex64, x []complex64, incX int, beta complex64, y []complex64, incY int)
	WChpr  func(ul blas.Uplo, n int, alpha float32, x []complex64, incX int, a []complex64)
	WChpr2 func(ul blas.Uplo, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, ap []complex64)
	WCtbmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex64, lda int, x []complex64, incX int)
	WCtbsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex64, lda int, x []complex64, incX int)
	WCtpmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex64, x []complex64, incX int)
	WCtpsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex64, x []complex64, incX int)
	WCtrmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex64, lda int, x []complex64, incX int)
	WCtrsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex64, lda int, x []complex64, incX int)
}

func (W _gonum_org_v1_gonum_blas_Complex64Level2) Cgbmv(tA blas.Transpose, m int, n int, kL int, kU int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int) {
	W.WCgbmv(tA, m, n, kL, kU, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Cgemv(tA blas.Transpose, m int, n int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int) {
	W.WCgemv(tA, m, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Cgerc(m int, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int) {
	W.WCgerc(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Cgeru(m int, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int) {
	W.WCgeru(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Chbmv(ul blas.Uplo, n int, k int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int) {
	W.WChbmv(ul, n, k, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Chemv(ul blas.Uplo, n int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int) {
	W.WChemv(ul, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Cher(ul blas.Uplo, n int, alpha float32, x []complex64, incX int, a []complex64, lda int) {
	W.WCher(ul, n, alpha, x, incX, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Cher2(ul blas.Uplo, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int) {
	W.WCher2(ul, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Chpmv(ul blas.Uplo, n int, alpha complex64, ap []complex64, x []complex64, incX int, beta complex64, y []complex64, incY int) {
	W.WChpmv(ul, n, alpha, ap, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Chpr(ul blas.Uplo, n int, alpha float32, x []complex64, incX int, a []complex64) {
	W.WChpr(ul, n, alpha, x, incX, a)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Chpr2(ul blas.Uplo, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, ap []complex64) {
	W.WChpr2(ul, n, alpha, x, incX, y, incY, ap)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Ctbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex64, lda int, x []complex64, incX int) {
	W.WCtbmv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Ctbsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []complex64, lda int, x []complex64, incX int) {
	W.WCtbsv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Ctpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex64, x []complex64, incX int) {
	W.WCtpmv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Ctpsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []complex64, x []complex64, incX int) {
	W.WCtpsv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Ctrmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex64, lda int, x []complex64, incX int) {
	W.WCtrmv(ul, tA, d, n, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level2) Ctrsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []complex64, lda int, x []complex64, incX int) {
	W.WCtrsv(ul, tA, d, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_Complex64Level3 is an interface wrapper for Complex64Level3 type
type _gonum_org_v1_gonum_blas_Complex64Level3 struct {
	WCgemm  func(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int)
	WChemm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int)
	WCher2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta float32, c []complex64, ldc int)
	WCherk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []complex64, lda int, beta float32, c []complex64, ldc int)
	WCsymm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int)
	WCsyr2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int)
	WCsyrk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, beta complex64, c []complex64, ldc int)
	WCtrmm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int)
	WCtrsm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int)
}

func (W _gonum_org_v1_gonum_blas_Complex64Level3) Cgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int) {
	W.WCgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level3) Chemm(s blas.Side, ul blas.Uplo, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int) {
	W.WChemm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level3) Cher2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta float32, c []complex64, ldc int) {
	W.WCher2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level3) Cherk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []complex64, lda int, beta float32, c []complex64, ldc int) {
	W.WCherk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level3) Csymm(s blas.Side, ul blas.Uplo, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int) {
	W.WCsymm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level3) Csyr2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int) {
	W.WCsyr2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level3) Csyrk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, beta complex64, c []complex64, ldc int) {
	W.WCsyrk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level3) Ctrmm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int) {
	W.WCtrmm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Complex64Level3) Ctrsm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha complex64, a []complex64, lda int, b []complex64, ldb int) {
	W.WCtrsm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}

// _gonum_org_v1_gonum_blas_Float32 is an interface wrapper for Float32 type
type _gonum_org_v1_gonum_blas_Float32 struct {
	WDsdot  func(n int, x []float32, incX int, y []float32, incY int) float64
	WIsamax func(n int, x []float32, incX int) int
	WSasum  func(n int, x []float32, incX int) float32
	WSaxpy  func(n int, alpha float32, x []float32, incX int, y []float32, incY int)
	WScopy  func(n int, x []float32, incX int, y []float32, incY int)
	WSdot   func(n int, x []float32, incX int, y []float32, incY int) float32
	WSdsdot func(n int, alpha float32, x []float32, incX int, y []float32, incY int) float32
	WSgbmv  func(tA blas.Transpose, m int, n int, kL int, kU int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
	WSgemm  func(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int)
	WSgemv  func(tA blas.Transpose, m int, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
	WSger   func(m int, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int)
	WSnrm2  func(n int, x []float32, incX int) float32
	WSrot   func(n int, x []float32, incX int, y []float32, incY int, c float32, s float32)
	WSrotg  func(a float32, b float32) (c float32, s float32, r float32, z float32)
	WSrotm  func(n int, x []float32, incX int, y []float32, incY int, p blas.SrotmParams)
	WSrotmg func(d1 float32, d2 float32, b1 float32, b2 float32) (p blas.SrotmParams, rd1 float32, rd2 float32, rb1 float32)
	WSsbmv  func(ul blas.Uplo, n int, k int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
	WSscal  func(n int, alpha float32, x []float32, incX int)
	WSspmv  func(ul blas.Uplo, n int, alpha float32, ap []float32, x []float32, incX int, beta float32, y []float32, incY int)
	WSspr   func(ul blas.Uplo, n int, alpha float32, x []float32, incX int, ap []float32)
	WSspr2  func(ul blas.Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32)
	WSswap  func(n int, x []float32, incX int, y []float32, incY int)
	WSsymm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int)
	WSsymv  func(ul blas.Uplo, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
	WSsyr   func(ul blas.Uplo, n int, alpha float32, x []float32, incX int, a []float32, lda int)
	WSsyr2  func(ul blas.Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int)
	WSsyr2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int)
	WSsyrk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []float32, lda int, beta float32, c []float32, ldc int)
	WStbmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float32, lda int, x []float32, incX int)
	WStbsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float32, lda int, x []float32, incX int)
	WStpmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float32, x []float32, incX int)
	WStpsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float32, x []float32, incX int)
	WStrmm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int)
	WStrmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float32, lda int, x []float32, incX int)
	WStrsm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int)
	WStrsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float32, lda int, x []float32, incX int)
}

func (W _gonum_org_v1_gonum_blas_Float32) Dsdot(n int, x []float32, incX int, y []float32, incY int) float64 {
	return W.WDsdot(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32) Isamax(n int, x []float32, incX int) int {
	return W.WIsamax(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sasum(n int, x []float32, incX int) float32 {
	return W.WSasum(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32) Saxpy(n int, alpha float32, x []float32, incX int, y []float32, incY int) {
	W.WSaxpy(n, alpha, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32) Scopy(n int, x []float32, incX int, y []float32, incY int) {
	W.WScopy(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sdot(n int, x []float32, incX int, y []float32, incY int) float32 {
	return W.WSdot(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sdsdot(n int, alpha float32, x []float32, incX int, y []float32, incY int) float32 {
	return W.WSdsdot(n, alpha, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sgbmv(tA blas.Transpose, m int, n int, kL int, kU int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	W.WSgbmv(tA, m, n, kL, kU, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int) {
	W.WSgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sgemv(tA blas.Transpose, m int, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	W.WSgemv(tA, m, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sger(m int, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int) {
	W.WSger(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float32) Snrm2(n int, x []float32, incX int) float32 {
	return W.WSnrm2(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32) Srot(n int, x []float32, incX int, y []float32, incY int, c float32, s float32) {
	W.WSrot(n, x, incX, y, incY, c, s)
}
func (W _gonum_org_v1_gonum_blas_Float32) Srotg(a float32, b float32) (c float32, s float32, r float32, z float32) {
	return W.WSrotg(a, b)
}
func (W _gonum_org_v1_gonum_blas_Float32) Srotm(n int, x []float32, incX int, y []float32, incY int, p blas.SrotmParams) {
	W.WSrotm(n, x, incX, y, incY, p)
}
func (W _gonum_org_v1_gonum_blas_Float32) Srotmg(d1 float32, d2 float32, b1 float32, b2 float32) (p blas.SrotmParams, rd1 float32, rd2 float32, rb1 float32) {
	return W.WSrotmg(d1, d2, b1, b2)
}
func (W _gonum_org_v1_gonum_blas_Float32) Ssbmv(ul blas.Uplo, n int, k int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	W.WSsbmv(ul, n, k, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sscal(n int, alpha float32, x []float32, incX int) {
	W.WSscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sspmv(ul blas.Uplo, n int, alpha float32, ap []float32, x []float32, incX int, beta float32, y []float32, incY int) {
	W.WSspmv(ul, n, alpha, ap, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sspr(ul blas.Uplo, n int, alpha float32, x []float32, incX int, ap []float32) {
	W.WSspr(ul, n, alpha, x, incX, ap)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sspr2(ul blas.Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32) {
	W.WSspr2(ul, n, alpha, x, incX, y, incY, a)
}
func (W _gonum_org_v1_gonum_blas_Float32) Sswap(n int, x []float32, incX int, y []float32, incY int) {
	W.WSswap(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32) Ssymm(s blas.Side, ul blas.Uplo, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int) {
	W.WSsymm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float32) Ssymv(ul blas.Uplo, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	W.WSsymv(ul, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32) Ssyr(ul blas.Uplo, n int, alpha float32, x []float32, incX int, a []float32, lda int) {
	W.WSsyr(ul, n, alpha, x, incX, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float32) Ssyr2(ul blas.Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int) {
	W.WSsyr2(ul, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float32) Ssyr2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int) {
	W.WSsyr2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float32) Ssyrk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []float32, lda int, beta float32, c []float32, ldc int) {
	W.WSsyrk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float32) Stbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float32, lda int, x []float32, incX int) {
	W.WStbmv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32) Stbsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float32, lda int, x []float32, incX int) {
	W.WStbsv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32) Stpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float32, x []float32, incX int) {
	W.WStpmv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32) Stpsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float32, x []float32, incX int) {
	W.WStpsv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32) Strmm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int) {
	W.WStrmm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Float32) Strmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float32, lda int, x []float32, incX int) {
	W.WStrmv(ul, tA, d, n, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32) Strsm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int) {
	W.WStrsm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Float32) Strsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float32, lda int, x []float32, incX int) {
	W.WStrsv(ul, tA, d, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_Float32Level1 is an interface wrapper for Float32Level1 type
type _gonum_org_v1_gonum_blas_Float32Level1 struct {
	WDsdot  func(n int, x []float32, incX int, y []float32, incY int) float64
	WIsamax func(n int, x []float32, incX int) int
	WSasum  func(n int, x []float32, incX int) float32
	WSaxpy  func(n int, alpha float32, x []float32, incX int, y []float32, incY int)
	WScopy  func(n int, x []float32, incX int, y []float32, incY int)
	WSdot   func(n int, x []float32, incX int, y []float32, incY int) float32
	WSdsdot func(n int, alpha float32, x []float32, incX int, y []float32, incY int) float32
	WSnrm2  func(n int, x []float32, incX int) float32
	WSrot   func(n int, x []float32, incX int, y []float32, incY int, c float32, s float32)
	WSrotg  func(a float32, b float32) (c float32, s float32, r float32, z float32)
	WSrotm  func(n int, x []float32, incX int, y []float32, incY int, p blas.SrotmParams)
	WSrotmg func(d1 float32, d2 float32, b1 float32, b2 float32) (p blas.SrotmParams, rd1 float32, rd2 float32, rb1 float32)
	WSscal  func(n int, alpha float32, x []float32, incX int)
	WSswap  func(n int, x []float32, incX int, y []float32, incY int)
}

func (W _gonum_org_v1_gonum_blas_Float32Level1) Dsdot(n int, x []float32, incX int, y []float32, incY int) float64 {
	return W.WDsdot(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Isamax(n int, x []float32, incX int) int {
	return W.WIsamax(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Sasum(n int, x []float32, incX int) float32 {
	return W.WSasum(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Saxpy(n int, alpha float32, x []float32, incX int, y []float32, incY int) {
	W.WSaxpy(n, alpha, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Scopy(n int, x []float32, incX int, y []float32, incY int) {
	W.WScopy(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Sdot(n int, x []float32, incX int, y []float32, incY int) float32 {
	return W.WSdot(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Sdsdot(n int, alpha float32, x []float32, incX int, y []float32, incY int) float32 {
	return W.WSdsdot(n, alpha, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Snrm2(n int, x []float32, incX int) float32 {
	return W.WSnrm2(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Srot(n int, x []float32, incX int, y []float32, incY int, c float32, s float32) {
	W.WSrot(n, x, incX, y, incY, c, s)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Srotg(a float32, b float32) (c float32, s float32, r float32, z float32) {
	return W.WSrotg(a, b)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Srotm(n int, x []float32, incX int, y []float32, incY int, p blas.SrotmParams) {
	W.WSrotm(n, x, incX, y, incY, p)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Srotmg(d1 float32, d2 float32, b1 float32, b2 float32) (p blas.SrotmParams, rd1 float32, rd2 float32, rb1 float32) {
	return W.WSrotmg(d1, d2, b1, b2)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Sscal(n int, alpha float32, x []float32, incX int) {
	W.WSscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32Level1) Sswap(n int, x []float32, incX int, y []float32, incY int) {
	W.WSswap(n, x, incX, y, incY)
}

// _gonum_org_v1_gonum_blas_Float32Level2 is an interface wrapper for Float32Level2 type
type _gonum_org_v1_gonum_blas_Float32Level2 struct {
	WSgbmv func(tA blas.Transpose, m int, n int, kL int, kU int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
	WSgemv func(tA blas.Transpose, m int, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
	WSger  func(m int, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int)
	WSsbmv func(ul blas.Uplo, n int, k int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
	WSspmv func(ul blas.Uplo, n int, alpha float32, ap []float32, x []float32, incX int, beta float32, y []float32, incY int)
	WSspr  func(ul blas.Uplo, n int, alpha float32, x []float32, incX int, ap []float32)
	WSspr2 func(ul blas.Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32)
	WSsymv func(ul blas.Uplo, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
	WSsyr  func(ul blas.Uplo, n int, alpha float32, x []float32, incX int, a []float32, lda int)
	WSsyr2 func(ul blas.Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int)
	WStbmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float32, lda int, x []float32, incX int)
	WStbsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float32, lda int, x []float32, incX int)
	WStpmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float32, x []float32, incX int)
	WStpsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float32, x []float32, incX int)
	WStrmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float32, lda int, x []float32, incX int)
	WStrsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float32, lda int, x []float32, incX int)
}

func (W _gonum_org_v1_gonum_blas_Float32Level2) Sgbmv(tA blas.Transpose, m int, n int, kL int, kU int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	W.WSgbmv(tA, m, n, kL, kU, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Sgemv(tA blas.Transpose, m int, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	W.WSgemv(tA, m, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Sger(m int, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int) {
	W.WSger(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Ssbmv(ul blas.Uplo, n int, k int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	W.WSsbmv(ul, n, k, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Sspmv(ul blas.Uplo, n int, alpha float32, ap []float32, x []float32, incX int, beta float32, y []float32, incY int) {
	W.WSspmv(ul, n, alpha, ap, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Sspr(ul blas.Uplo, n int, alpha float32, x []float32, incX int, ap []float32) {
	W.WSspr(ul, n, alpha, x, incX, ap)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Sspr2(ul blas.Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32) {
	W.WSspr2(ul, n, alpha, x, incX, y, incY, a)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Ssymv(ul blas.Uplo, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	W.WSsymv(ul, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Ssyr(ul blas.Uplo, n int, alpha float32, x []float32, incX int, a []float32, lda int) {
	W.WSsyr(ul, n, alpha, x, incX, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Ssyr2(ul blas.Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int) {
	W.WSsyr2(ul, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Stbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float32, lda int, x []float32, incX int) {
	W.WStbmv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Stbsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float32, lda int, x []float32, incX int) {
	W.WStbsv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Stpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float32, x []float32, incX int) {
	W.WStpmv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Stpsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float32, x []float32, incX int) {
	W.WStpsv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Strmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float32, lda int, x []float32, incX int) {
	W.WStrmv(ul, tA, d, n, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float32Level2) Strsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float32, lda int, x []float32, incX int) {
	W.WStrsv(ul, tA, d, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_Float32Level3 is an interface wrapper for Float32Level3 type
type _gonum_org_v1_gonum_blas_Float32Level3 struct {
	WSgemm  func(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int)
	WSsymm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int)
	WSsyr2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int)
	WSsyrk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []float32, lda int, beta float32, c []float32, ldc int)
	WStrmm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int)
	WStrsm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int)
}

func (W _gonum_org_v1_gonum_blas_Float32Level3) Sgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int) {
	W.WSgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float32Level3) Ssymm(s blas.Side, ul blas.Uplo, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int) {
	W.WSsymm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float32Level3) Ssyr2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int) {
	W.WSsyr2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float32Level3) Ssyrk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []float32, lda int, beta float32, c []float32, ldc int) {
	W.WSsyrk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float32Level3) Strmm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int) {
	W.WStrmm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Float32Level3) Strsm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int) {
	W.WStrsm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}

// _gonum_org_v1_gonum_blas_Float64 is an interface wrapper for Float64 type
type _gonum_org_v1_gonum_blas_Float64 struct {
	WDasum  func(n int, x []float64, incX int) float64
	WDaxpy  func(n int, alpha float64, x []float64, incX int, y []float64, incY int)
	WDcopy  func(n int, x []float64, incX int, y []float64, incY int)
	WDdot   func(n int, x []float64, incX int, y []float64, incY int) float64
	WDgbmv  func(tA blas.Transpose, m int, n int, kL int, kU int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
	WDgemm  func(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int)
	WDgemv  func(tA blas.Transpose, m int, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
	WDger   func(m int, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int)
	WDnrm2  func(n int, x []float64, incX int) float64
	WDrot   func(n int, x []float64, incX int, y []float64, incY int, c float64, s float64)
	WDrotg  func(a float64, b float64) (c float64, s float64, r float64, z float64)
	WDrotm  func(n int, x []float64, incX int, y []float64, incY int, p blas.DrotmParams)
	WDrotmg func(d1 float64, d2 float64, b1 float64, b2 float64) (p blas.DrotmParams, rd1 float64, rd2 float64, rb1 float64)
	WDsbmv  func(ul blas.Uplo, n int, k int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
	WDscal  func(n int, alpha float64, x []float64, incX int)
	WDspmv  func(ul blas.Uplo, n int, alpha float64, ap []float64, x []float64, incX int, beta float64, y []float64, incY int)
	WDspr   func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, ap []float64)
	WDspr2  func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64)
	WDswap  func(n int, x []float64, incX int, y []float64, incY int)
	WDsymm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int)
	WDsymv  func(ul blas.Uplo, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
	WDsyr   func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, a []float64, lda int)
	WDsyr2  func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int)
	WDsyr2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int)
	WDsyrk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []float64, lda int, beta float64, c []float64, ldc int)
	WDtbmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int)
	WDtbsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int)
	WDtpmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int)
	WDtpsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int)
	WDtrmm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int)
	WDtrmv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int)
	WDtrsm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int)
	WDtrsv  func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int)
	WIdamax func(n int, x []float64, incX int) int
}

func (W _gonum_org_v1_gonum_blas_Float64) Dasum(n int, x []float64, incX int) float64 {
	return W.WDasum(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64) Daxpy(n int, alpha float64, x []float64, incX int, y []float64, incY int) {
	W.WDaxpy(n, alpha, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dcopy(n int, x []float64, incX int, y []float64, incY int) {
	W.WDcopy(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64) Ddot(n int, x []float64, incX int, y []float64, incY int) float64 {
	return W.WDdot(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dgbmv(tA blas.Transpose, m int, n int, kL int, kU int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDgbmv(tA, m, n, kL, kU, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	W.WDgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dgemv(tA blas.Transpose, m int, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDgemv(tA, m, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dger(m int, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int) {
	W.WDger(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dnrm2(n int, x []float64, incX int) float64 {
	return W.WDnrm2(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64) Drot(n int, x []float64, incX int, y []float64, incY int, c float64, s float64) {
	W.WDrot(n, x, incX, y, incY, c, s)
}
func (W _gonum_org_v1_gonum_blas_Float64) Drotg(a float64, b float64) (c float64, s float64, r float64, z float64) {
	return W.WDrotg(a, b)
}
func (W _gonum_org_v1_gonum_blas_Float64) Drotm(n int, x []float64, incX int, y []float64, incY int, p blas.DrotmParams) {
	W.WDrotm(n, x, incX, y, incY, p)
}
func (W _gonum_org_v1_gonum_blas_Float64) Drotmg(d1 float64, d2 float64, b1 float64, b2 float64) (p blas.DrotmParams, rd1 float64, rd2 float64, rb1 float64) {
	return W.WDrotmg(d1, d2, b1, b2)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dsbmv(ul blas.Uplo, n int, k int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDsbmv(ul, n, k, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dscal(n int, alpha float64, x []float64, incX int) {
	W.WDscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dspmv(ul blas.Uplo, n int, alpha float64, ap []float64, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDspmv(ul, n, alpha, ap, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dspr(ul blas.Uplo, n int, alpha float64, x []float64, incX int, ap []float64) {
	W.WDspr(ul, n, alpha, x, incX, ap)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dspr2(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64) {
	W.WDspr2(ul, n, alpha, x, incX, y, incY, a)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dswap(n int, x []float64, incX int, y []float64, incY int) {
	W.WDswap(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dsymm(s blas.Side, ul blas.Uplo, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	W.WDsymm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dsymv(ul blas.Uplo, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDsymv(ul, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dsyr(ul blas.Uplo, n int, alpha float64, x []float64, incX int, a []float64, lda int) {
	W.WDsyr(ul, n, alpha, x, incX, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dsyr2(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int) {
	W.WDsyr2(ul, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dsyr2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	W.WDsyr2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dsyrk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []float64, lda int, beta float64, c []float64, ldc int) {
	W.WDsyrk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dtbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int) {
	W.WDtbmv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dtbsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int) {
	W.WDtbsv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dtpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int) {
	W.WDtpmv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dtpsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int) {
	W.WDtpsv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dtrmm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int) {
	W.WDtrmm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dtrmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int) {
	W.WDtrmv(ul, tA, d, n, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dtrsm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int) {
	W.WDtrsm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Float64) Dtrsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int) {
	W.WDtrsv(ul, tA, d, n, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64) Idamax(n int, x []float64, incX int) int {
	return W.WIdamax(n, x, incX)
}

// _gonum_org_v1_gonum_blas_Float64Level1 is an interface wrapper for Float64Level1 type
type _gonum_org_v1_gonum_blas_Float64Level1 struct {
	WDasum  func(n int, x []float64, incX int) float64
	WDaxpy  func(n int, alpha float64, x []float64, incX int, y []float64, incY int)
	WDcopy  func(n int, x []float64, incX int, y []float64, incY int)
	WDdot   func(n int, x []float64, incX int, y []float64, incY int) float64
	WDnrm2  func(n int, x []float64, incX int) float64
	WDrot   func(n int, x []float64, incX int, y []float64, incY int, c float64, s float64)
	WDrotg  func(a float64, b float64) (c float64, s float64, r float64, z float64)
	WDrotm  func(n int, x []float64, incX int, y []float64, incY int, p blas.DrotmParams)
	WDrotmg func(d1 float64, d2 float64, b1 float64, b2 float64) (p blas.DrotmParams, rd1 float64, rd2 float64, rb1 float64)
	WDscal  func(n int, alpha float64, x []float64, incX int)
	WDswap  func(n int, x []float64, incX int, y []float64, incY int)
	WIdamax func(n int, x []float64, incX int) int
}

func (W _gonum_org_v1_gonum_blas_Float64Level1) Dasum(n int, x []float64, incX int) float64 {
	return W.WDasum(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64Level1) Daxpy(n int, alpha float64, x []float64, incX int, y []float64, incY int) {
	W.WDaxpy(n, alpha, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64Level1) Dcopy(n int, x []float64, incX int, y []float64, incY int) {
	W.WDcopy(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64Level1) Ddot(n int, x []float64, incX int, y []float64, incY int) float64 {
	return W.WDdot(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64Level1) Dnrm2(n int, x []float64, incX int) float64 {
	return W.WDnrm2(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64Level1) Drot(n int, x []float64, incX int, y []float64, incY int, c float64, s float64) {
	W.WDrot(n, x, incX, y, incY, c, s)
}
func (W _gonum_org_v1_gonum_blas_Float64Level1) Drotg(a float64, b float64) (c float64, s float64, r float64, z float64) {
	return W.WDrotg(a, b)
}
func (W _gonum_org_v1_gonum_blas_Float64Level1) Drotm(n int, x []float64, incX int, y []float64, incY int, p blas.DrotmParams) {
	W.WDrotm(n, x, incX, y, incY, p)
}
func (W _gonum_org_v1_gonum_blas_Float64Level1) Drotmg(d1 float64, d2 float64, b1 float64, b2 float64) (p blas.DrotmParams, rd1 float64, rd2 float64, rb1 float64) {
	return W.WDrotmg(d1, d2, b1, b2)
}
func (W _gonum_org_v1_gonum_blas_Float64Level1) Dscal(n int, alpha float64, x []float64, incX int) {
	W.WDscal(n, alpha, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64Level1) Dswap(n int, x []float64, incX int, y []float64, incY int) {
	W.WDswap(n, x, incX, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64Level1) Idamax(n int, x []float64, incX int) int {
	return W.WIdamax(n, x, incX)
}

// _gonum_org_v1_gonum_blas_Float64Level2 is an interface wrapper for Float64Level2 type
type _gonum_org_v1_gonum_blas_Float64Level2 struct {
	WDgbmv func(tA blas.Transpose, m int, n int, kL int, kU int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
	WDgemv func(tA blas.Transpose, m int, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
	WDger  func(m int, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int)
	WDsbmv func(ul blas.Uplo, n int, k int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
	WDspmv func(ul blas.Uplo, n int, alpha float64, ap []float64, x []float64, incX int, beta float64, y []float64, incY int)
	WDspr  func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, ap []float64)
	WDspr2 func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64)
	WDsymv func(ul blas.Uplo, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
	WDsyr  func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, a []float64, lda int)
	WDsyr2 func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int)
	WDtbmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int)
	WDtbsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int)
	WDtpmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int)
	WDtpsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int)
	WDtrmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int)
	WDtrsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int)
}

func (W _gonum_org_v1_gonum_blas_Float64Level2) Dgbmv(tA blas.Transpose, m int, n int, kL int, kU int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDgbmv(tA, m, n, kL, kU, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dgemv(tA blas.Transpose, m int, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDgemv(tA, m, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dger(m int, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int) {
	W.WDger(m, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dsbmv(ul blas.Uplo, n int, k int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDsbmv(ul, n, k, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dspmv(ul blas.Uplo, n int, alpha float64, ap []float64, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDspmv(ul, n, alpha, ap, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dspr(ul blas.Uplo, n int, alpha float64, x []float64, incX int, ap []float64) {
	W.WDspr(ul, n, alpha, x, incX, ap)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dspr2(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64) {
	W.WDspr2(ul, n, alpha, x, incX, y, incY, a)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dsymv(ul blas.Uplo, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDsymv(ul, n, alpha, a, lda, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dsyr(ul blas.Uplo, n int, alpha float64, x []float64, incX int, a []float64, lda int) {
	W.WDsyr(ul, n, alpha, x, incX, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dsyr2(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int) {
	W.WDsyr2(ul, n, alpha, x, incX, y, incY, a, lda)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dtbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int) {
	W.WDtbmv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dtbsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int) {
	W.WDtbsv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dtpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int) {
	W.WDtpmv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dtpsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int) {
	W.WDtpsv(ul, tA, d, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dtrmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int) {
	W.WDtrmv(ul, tA, d, n, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_Float64Level2) Dtrsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int) {
	W.WDtrsv(ul, tA, d, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_Float64Level3 is an interface wrapper for Float64Level3 type
type _gonum_org_v1_gonum_blas_Float64Level3 struct {
	WDgemm  func(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int)
	WDsymm  func(s blas.Side, ul blas.Uplo, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int)
	WDsyr2k func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int)
	WDsyrk  func(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []float64, lda int, beta float64, c []float64, ldc int)
	WDtrmm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int)
	WDtrsm  func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int)
}

func (W _gonum_org_v1_gonum_blas_Float64Level3) Dgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	W.WDgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float64Level3) Dsymm(s blas.Side, ul blas.Uplo, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	W.WDsymm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float64Level3) Dsyr2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	W.WDsyr2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float64Level3) Dsyrk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []float64, lda int, beta float64, c []float64, ldc int) {
	W.WDsyrk(ul, t, n, k, alpha, a, lda, beta, c, ldc)
}
func (W _gonum_org_v1_gonum_blas_Float64Level3) Dtrmm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int) {
	W.WDtrmm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
func (W _gonum_org_v1_gonum_blas_Float64Level3) Dtrsm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int) {
	W.WDtrsm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}
