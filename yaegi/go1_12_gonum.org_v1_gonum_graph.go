// Code generated by 'goexports gonum.org/v1/gonum/graph'. DO NOT EDIT.

// Copyright Â©2019 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build go1.12,!go1.13

package yaegi

import (
	"reflect"

	"gonum.org/v1/gonum/graph"
)

func init() {
	Symbols["gonum.org/v1/gonum/graph"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Copy":            reflect.ValueOf(graph.Copy),
		"CopyWeighted":    reflect.ValueOf(graph.CopyWeighted),
		"EdgesOf":         reflect.ValueOf(graph.EdgesOf),
		"Empty":           reflect.ValueOf(graph.Empty),
		"LinesOf":         reflect.ValueOf(graph.LinesOf),
		"NodesOf":         reflect.ValueOf(graph.NodesOf),
		"WeightedEdgesOf": reflect.ValueOf(graph.WeightedEdgesOf),
		"WeightedLinesOf": reflect.ValueOf(graph.WeightedLinesOf),

		// type definitions
		"Builder":                             reflect.ValueOf((*graph.Builder)(nil)),
		"Directed":                            reflect.ValueOf((*graph.Directed)(nil)),
		"DirectedBuilder":                     reflect.ValueOf((*graph.DirectedBuilder)(nil)),
		"DirectedMultigraph":                  reflect.ValueOf((*graph.DirectedMultigraph)(nil)),
		"DirectedMultigraphBuilder":           reflect.ValueOf((*graph.DirectedMultigraphBuilder)(nil)),
		"DirectedWeightedBuilder":             reflect.ValueOf((*graph.DirectedWeightedBuilder)(nil)),
		"DirectedWeightedMultigraphBuilder":   reflect.ValueOf((*graph.DirectedWeightedMultigraphBuilder)(nil)),
		"Edge":                                reflect.ValueOf((*graph.Edge)(nil)),
		"EdgeAdder":                           reflect.ValueOf((*graph.EdgeAdder)(nil)),
		"EdgePair":                            reflect.ValueOf((*graph.EdgePair)(nil)),
		"EdgeRemover":                         reflect.ValueOf((*graph.EdgeRemover)(nil)),
		"EdgeSlicer":                          reflect.ValueOf((*graph.EdgeSlicer)(nil)),
		"Edges":                               reflect.ValueOf((*graph.Edges)(nil)),
		"Graph":                               reflect.ValueOf((*graph.Graph)(nil)),
		"Iterator":                            reflect.ValueOf((*graph.Iterator)(nil)),
		"Line":                                reflect.ValueOf((*graph.Line)(nil)),
		"LineAdder":                           reflect.ValueOf((*graph.LineAdder)(nil)),
		"LineRemover":                         reflect.ValueOf((*graph.LineRemover)(nil)),
		"LineSlicer":                          reflect.ValueOf((*graph.LineSlicer)(nil)),
		"Lines":                               reflect.ValueOf((*graph.Lines)(nil)),
		"Multigraph":                          reflect.ValueOf((*graph.Multigraph)(nil)),
		"MultigraphBuilder":                   reflect.ValueOf((*graph.MultigraphBuilder)(nil)),
		"Node":                                reflect.ValueOf((*graph.Node)(nil)),
		"NodeAdder":                           reflect.ValueOf((*graph.NodeAdder)(nil)),
		"NodeRemover":                         reflect.ValueOf((*graph.NodeRemover)(nil)),
		"NodeSlicer":                          reflect.ValueOf((*graph.NodeSlicer)(nil)),
		"Nodes":                               reflect.ValueOf((*graph.Nodes)(nil)),
		"Undirect":                            reflect.ValueOf((*graph.Undirect)(nil)),
		"UndirectWeighted":                    reflect.ValueOf((*graph.UndirectWeighted)(nil)),
		"Undirected":                          reflect.ValueOf((*graph.Undirected)(nil)),
		"UndirectedBuilder":                   reflect.ValueOf((*graph.UndirectedBuilder)(nil)),
		"UndirectedMultigraph":                reflect.ValueOf((*graph.UndirectedMultigraph)(nil)),
		"UndirectedMultigraphBuilder":         reflect.ValueOf((*graph.UndirectedMultigraphBuilder)(nil)),
		"UndirectedWeightedBuilder":           reflect.ValueOf((*graph.UndirectedWeightedBuilder)(nil)),
		"UndirectedWeightedMultigraphBuilder": reflect.ValueOf((*graph.UndirectedWeightedMultigraphBuilder)(nil)),
		"Weighted":                            reflect.ValueOf((*graph.Weighted)(nil)),
		"WeightedBuilder":                     reflect.ValueOf((*graph.WeightedBuilder)(nil)),
		"WeightedDirected":                    reflect.ValueOf((*graph.WeightedDirected)(nil)),
		"WeightedDirectedMultigraph":          reflect.ValueOf((*graph.WeightedDirectedMultigraph)(nil)),
		"WeightedEdge":                        reflect.ValueOf((*graph.WeightedEdge)(nil)),
		"WeightedEdgeAdder":                   reflect.ValueOf((*graph.WeightedEdgeAdder)(nil)),
		"WeightedEdgePair":                    reflect.ValueOf((*graph.WeightedEdgePair)(nil)),
		"WeightedEdgeSlicer":                  reflect.ValueOf((*graph.WeightedEdgeSlicer)(nil)),
		"WeightedEdges":                       reflect.ValueOf((*graph.WeightedEdges)(nil)),
		"WeightedLine":                        reflect.ValueOf((*graph.WeightedLine)(nil)),
		"WeightedLineAdder":                   reflect.ValueOf((*graph.WeightedLineAdder)(nil)),
		"WeightedLineSlicer":                  reflect.ValueOf((*graph.WeightedLineSlicer)(nil)),
		"WeightedLines":                       reflect.ValueOf((*graph.WeightedLines)(nil)),
		"WeightedMultigraph":                  reflect.ValueOf((*graph.WeightedMultigraph)(nil)),
		"WeightedMultigraphBuilder":           reflect.ValueOf((*graph.WeightedMultigraphBuilder)(nil)),
		"WeightedUndirected":                  reflect.ValueOf((*graph.WeightedUndirected)(nil)),
		"WeightedUndirectedMultigraph":        reflect.ValueOf((*graph.WeightedUndirectedMultigraph)(nil)),

		// interface wrapper definitions
		"_Builder":                             reflect.ValueOf((*_gonum_org_v1_gonum_graph_Builder)(nil)),
		"_Directed":                            reflect.ValueOf((*_gonum_org_v1_gonum_graph_Directed)(nil)),
		"_DirectedBuilder":                     reflect.ValueOf((*_gonum_org_v1_gonum_graph_DirectedBuilder)(nil)),
		"_DirectedMultigraph":                  reflect.ValueOf((*_gonum_org_v1_gonum_graph_DirectedMultigraph)(nil)),
		"_DirectedMultigraphBuilder":           reflect.ValueOf((*_gonum_org_v1_gonum_graph_DirectedMultigraphBuilder)(nil)),
		"_DirectedWeightedBuilder":             reflect.ValueOf((*_gonum_org_v1_gonum_graph_DirectedWeightedBuilder)(nil)),
		"_DirectedWeightedMultigraphBuilder":   reflect.ValueOf((*_gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder)(nil)),
		"_Edge":                                reflect.ValueOf((*_gonum_org_v1_gonum_graph_Edge)(nil)),
		"_EdgeAdder":                           reflect.ValueOf((*_gonum_org_v1_gonum_graph_EdgeAdder)(nil)),
		"_EdgeRemover":                         reflect.ValueOf((*_gonum_org_v1_gonum_graph_EdgeRemover)(nil)),
		"_EdgeSlicer":                          reflect.ValueOf((*_gonum_org_v1_gonum_graph_EdgeSlicer)(nil)),
		"_Edges":                               reflect.ValueOf((*_gonum_org_v1_gonum_graph_Edges)(nil)),
		"_Graph":                               reflect.ValueOf((*_gonum_org_v1_gonum_graph_Graph)(nil)),
		"_Iterator":                            reflect.ValueOf((*_gonum_org_v1_gonum_graph_Iterator)(nil)),
		"_Line":                                reflect.ValueOf((*_gonum_org_v1_gonum_graph_Line)(nil)),
		"_LineAdder":                           reflect.ValueOf((*_gonum_org_v1_gonum_graph_LineAdder)(nil)),
		"_LineRemover":                         reflect.ValueOf((*_gonum_org_v1_gonum_graph_LineRemover)(nil)),
		"_LineSlicer":                          reflect.ValueOf((*_gonum_org_v1_gonum_graph_LineSlicer)(nil)),
		"_Lines":                               reflect.ValueOf((*_gonum_org_v1_gonum_graph_Lines)(nil)),
		"_Multigraph":                          reflect.ValueOf((*_gonum_org_v1_gonum_graph_Multigraph)(nil)),
		"_MultigraphBuilder":                   reflect.ValueOf((*_gonum_org_v1_gonum_graph_MultigraphBuilder)(nil)),
		"_Node":                                reflect.ValueOf((*_gonum_org_v1_gonum_graph_Node)(nil)),
		"_NodeAdder":                           reflect.ValueOf((*_gonum_org_v1_gonum_graph_NodeAdder)(nil)),
		"_NodeRemover":                         reflect.ValueOf((*_gonum_org_v1_gonum_graph_NodeRemover)(nil)),
		"_NodeSlicer":                          reflect.ValueOf((*_gonum_org_v1_gonum_graph_NodeSlicer)(nil)),
		"_Nodes":                               reflect.ValueOf((*_gonum_org_v1_gonum_graph_Nodes)(nil)),
		"_Undirected":                          reflect.ValueOf((*_gonum_org_v1_gonum_graph_Undirected)(nil)),
		"_UndirectedBuilder":                   reflect.ValueOf((*_gonum_org_v1_gonum_graph_UndirectedBuilder)(nil)),
		"_UndirectedMultigraph":                reflect.ValueOf((*_gonum_org_v1_gonum_graph_UndirectedMultigraph)(nil)),
		"_UndirectedMultigraphBuilder":         reflect.ValueOf((*_gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder)(nil)),
		"_UndirectedWeightedBuilder":           reflect.ValueOf((*_gonum_org_v1_gonum_graph_UndirectedWeightedBuilder)(nil)),
		"_UndirectedWeightedMultigraphBuilder": reflect.ValueOf((*_gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder)(nil)),
		"_Weighted":                            reflect.ValueOf((*_gonum_org_v1_gonum_graph_Weighted)(nil)),
		"_WeightedBuilder":                     reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedBuilder)(nil)),
		"_WeightedDirected":                    reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedDirected)(nil)),
		"_WeightedDirectedMultigraph":          reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedDirectedMultigraph)(nil)),
		"_WeightedEdge":                        reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedEdge)(nil)),
		"_WeightedEdgeAdder":                   reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedEdgeAdder)(nil)),
		"_WeightedEdgeSlicer":                  reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedEdgeSlicer)(nil)),
		"_WeightedEdges":                       reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedEdges)(nil)),
		"_WeightedLine":                        reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedLine)(nil)),
		"_WeightedLineAdder":                   reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedLineAdder)(nil)),
		"_WeightedLineSlicer":                  reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedLineSlicer)(nil)),
		"_WeightedLines":                       reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedLines)(nil)),
		"_WeightedMultigraph":                  reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedMultigraph)(nil)),
		"_WeightedMultigraphBuilder":           reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedMultigraphBuilder)(nil)),
		"_WeightedUndirected":                  reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedUndirected)(nil)),
		"_WeightedUndirectedMultigraph":        reflect.ValueOf((*_gonum_org_v1_gonum_graph_WeightedUndirectedMultigraph)(nil)),
	}
}

// _gonum_org_v1_gonum_graph_Builder is an interface wrapper for Builder type
type _gonum_org_v1_gonum_graph_Builder struct {
	WAddNode func(a0 graph.Node)
	WNewEdge func(from graph.Node, to graph.Node) graph.Edge
	WNewNode func() graph.Node
	WSetEdge func(e graph.Edge)
}

func (W _gonum_org_v1_gonum_graph_Builder) AddNode(a0 graph.Node) { W.WAddNode(a0) }
func (W _gonum_org_v1_gonum_graph_Builder) NewEdge(from graph.Node, to graph.Node) graph.Edge {
	return W.WNewEdge(from, to)
}
func (W _gonum_org_v1_gonum_graph_Builder) NewNode() graph.Node  { return W.WNewNode() }
func (W _gonum_org_v1_gonum_graph_Builder) SetEdge(e graph.Edge) { W.WSetEdge(e) }

// _gonum_org_v1_gonum_graph_Directed is an interface wrapper for Directed type
type _gonum_org_v1_gonum_graph_Directed struct {
	WEdge           func(uid int64, vid int64) graph.Edge
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WHasEdgeFromTo  func(uid int64, vid int64) bool
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
	WTo             func(id int64) graph.Nodes
}

func (W _gonum_org_v1_gonum_graph_Directed) Edge(uid int64, vid int64) graph.Edge {
	return W.WEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_Directed) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_Directed) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_Directed) HasEdgeFromTo(uid int64, vid int64) bool {
	return W.WHasEdgeFromTo(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_Directed) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_Directed) Nodes() graph.Nodes       { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_Directed) To(id int64) graph.Nodes  { return W.WTo(id) }

// _gonum_org_v1_gonum_graph_DirectedBuilder is an interface wrapper for DirectedBuilder type
type _gonum_org_v1_gonum_graph_DirectedBuilder struct {
	WAddNode        func(a0 graph.Node)
	WEdge           func(uid int64, vid int64) graph.Edge
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WHasEdgeFromTo  func(uid int64, vid int64) bool
	WNewEdge        func(from graph.Node, to graph.Node) graph.Edge
	WNewNode        func() graph.Node
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
	WSetEdge        func(e graph.Edge)
	WTo             func(id int64) graph.Nodes
}

func (W _gonum_org_v1_gonum_graph_DirectedBuilder) AddNode(a0 graph.Node) { W.WAddNode(a0) }
func (W _gonum_org_v1_gonum_graph_DirectedBuilder) Edge(uid int64, vid int64) graph.Edge {
	return W.WEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_DirectedBuilder) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_DirectedBuilder) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_DirectedBuilder) HasEdgeFromTo(uid int64, vid int64) bool {
	return W.WHasEdgeFromTo(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_DirectedBuilder) NewEdge(from graph.Node, to graph.Node) graph.Edge {
	return W.WNewEdge(from, to)
}
func (W _gonum_org_v1_gonum_graph_DirectedBuilder) NewNode() graph.Node      { return W.WNewNode() }
func (W _gonum_org_v1_gonum_graph_DirectedBuilder) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_DirectedBuilder) Nodes() graph.Nodes       { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_DirectedBuilder) SetEdge(e graph.Edge)     { W.WSetEdge(e) }
func (W _gonum_org_v1_gonum_graph_DirectedBuilder) To(id int64) graph.Nodes  { return W.WTo(id) }

// _gonum_org_v1_gonum_graph_DirectedMultigraph is an interface wrapper for DirectedMultigraph type
type _gonum_org_v1_gonum_graph_DirectedMultigraph struct {
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WHasEdgeFromTo  func(uid int64, vid int64) bool
	WLines          func(uid int64, vid int64) graph.Lines
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
	WTo             func(id int64) graph.Nodes
}

func (W _gonum_org_v1_gonum_graph_DirectedMultigraph) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_DirectedMultigraph) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_DirectedMultigraph) HasEdgeFromTo(uid int64, vid int64) bool {
	return W.WHasEdgeFromTo(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_DirectedMultigraph) Lines(uid int64, vid int64) graph.Lines {
	return W.WLines(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_DirectedMultigraph) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_DirectedMultigraph) Nodes() graph.Nodes       { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_DirectedMultigraph) To(id int64) graph.Nodes  { return W.WTo(id) }

// _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder is an interface wrapper for DirectedMultigraphBuilder type
type _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder struct {
	WAddNode        func(a0 graph.Node)
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WHasEdgeFromTo  func(uid int64, vid int64) bool
	WLines          func(uid int64, vid int64) graph.Lines
	WNewLine        func(from graph.Node, to graph.Node) graph.Line
	WNewNode        func() graph.Node
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
	WSetLine        func(l graph.Line)
	WTo             func(id int64) graph.Nodes
}

func (W _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder) AddNode(a0 graph.Node) { W.WAddNode(a0) }
func (W _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder) From(id int64) graph.Nodes {
	return W.WFrom(id)
}
func (W _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder) HasEdgeFromTo(uid int64, vid int64) bool {
	return W.WHasEdgeFromTo(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder) Lines(uid int64, vid int64) graph.Lines {
	return W.WLines(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder) NewLine(from graph.Node, to graph.Node) graph.Line {
	return W.WNewLine(from, to)
}
func (W _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder) NewNode() graph.Node {
	return W.WNewNode()
}
func (W _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder) Node(id int64) graph.Node {
	return W.WNode(id)
}
func (W _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder) Nodes() graph.Nodes   { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder) SetLine(l graph.Line) { W.WSetLine(l) }
func (W _gonum_org_v1_gonum_graph_DirectedMultigraphBuilder) To(id int64) graph.Nodes {
	return W.WTo(id)
}

// _gonum_org_v1_gonum_graph_DirectedWeightedBuilder is an interface wrapper for DirectedWeightedBuilder type
type _gonum_org_v1_gonum_graph_DirectedWeightedBuilder struct {
	WAddNode         func(a0 graph.Node)
	WEdge            func(uid int64, vid int64) graph.Edge
	WFrom            func(id int64) graph.Nodes
	WHasEdgeBetween  func(xid int64, yid int64) bool
	WHasEdgeFromTo   func(uid int64, vid int64) bool
	WNewNode         func() graph.Node
	WNewWeightedEdge func(from graph.Node, to graph.Node, weight float64) graph.WeightedEdge
	WNode            func(id int64) graph.Node
	WNodes           func() graph.Nodes
	WSetWeightedEdge func(e graph.WeightedEdge)
	WTo              func(id int64) graph.Nodes
}

func (W _gonum_org_v1_gonum_graph_DirectedWeightedBuilder) AddNode(a0 graph.Node) { W.WAddNode(a0) }
func (W _gonum_org_v1_gonum_graph_DirectedWeightedBuilder) Edge(uid int64, vid int64) graph.Edge {
	return W.WEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedBuilder) From(id int64) graph.Nodes {
	return W.WFrom(id)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedBuilder) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedBuilder) HasEdgeFromTo(uid int64, vid int64) bool {
	return W.WHasEdgeFromTo(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedBuilder) NewNode() graph.Node { return W.WNewNode() }
func (W _gonum_org_v1_gonum_graph_DirectedWeightedBuilder) NewWeightedEdge(from graph.Node, to graph.Node, weight float64) graph.WeightedEdge {
	return W.WNewWeightedEdge(from, to, weight)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedBuilder) Node(id int64) graph.Node {
	return W.WNode(id)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedBuilder) Nodes() graph.Nodes { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_DirectedWeightedBuilder) SetWeightedEdge(e graph.WeightedEdge) {
	W.WSetWeightedEdge(e)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedBuilder) To(id int64) graph.Nodes {
	return W.WTo(id)
}

// _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder is an interface wrapper for DirectedWeightedMultigraphBuilder type
type _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder struct {
	WAddNode         func(a0 graph.Node)
	WFrom            func(id int64) graph.Nodes
	WHasEdgeBetween  func(xid int64, yid int64) bool
	WHasEdgeFromTo   func(uid int64, vid int64) bool
	WLines           func(uid int64, vid int64) graph.Lines
	WNewNode         func() graph.Node
	WNewWeightedLine func(from graph.Node, to graph.Node, weight float64) graph.WeightedLine
	WNode            func(id int64) graph.Node
	WNodes           func() graph.Nodes
	WSetWeightedLine func(l graph.WeightedLine)
	WTo              func(id int64) graph.Nodes
}

func (W _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder) AddNode(a0 graph.Node) {
	W.WAddNode(a0)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder) From(id int64) graph.Nodes {
	return W.WFrom(id)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder) HasEdgeFromTo(uid int64, vid int64) bool {
	return W.WHasEdgeFromTo(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder) Lines(uid int64, vid int64) graph.Lines {
	return W.WLines(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder) NewNode() graph.Node {
	return W.WNewNode()
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder) NewWeightedLine(from graph.Node, to graph.Node, weight float64) graph.WeightedLine {
	return W.WNewWeightedLine(from, to, weight)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder) Node(id int64) graph.Node {
	return W.WNode(id)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder) Nodes() graph.Nodes {
	return W.WNodes()
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder) SetWeightedLine(l graph.WeightedLine) {
	W.WSetWeightedLine(l)
}
func (W _gonum_org_v1_gonum_graph_DirectedWeightedMultigraphBuilder) To(id int64) graph.Nodes {
	return W.WTo(id)
}

// _gonum_org_v1_gonum_graph_Edge is an interface wrapper for Edge type
type _gonum_org_v1_gonum_graph_Edge struct {
	WFrom         func() graph.Node
	WReversedEdge func() graph.Edge
	WTo           func() graph.Node
}

func (W _gonum_org_v1_gonum_graph_Edge) From() graph.Node         { return W.WFrom() }
func (W _gonum_org_v1_gonum_graph_Edge) ReversedEdge() graph.Edge { return W.WReversedEdge() }
func (W _gonum_org_v1_gonum_graph_Edge) To() graph.Node           { return W.WTo() }

// _gonum_org_v1_gonum_graph_EdgeAdder is an interface wrapper for EdgeAdder type
type _gonum_org_v1_gonum_graph_EdgeAdder struct {
	WNewEdge func(from graph.Node, to graph.Node) graph.Edge
	WSetEdge func(e graph.Edge)
}

func (W _gonum_org_v1_gonum_graph_EdgeAdder) NewEdge(from graph.Node, to graph.Node) graph.Edge {
	return W.WNewEdge(from, to)
}
func (W _gonum_org_v1_gonum_graph_EdgeAdder) SetEdge(e graph.Edge) { W.WSetEdge(e) }

// _gonum_org_v1_gonum_graph_EdgeRemover is an interface wrapper for EdgeRemover type
type _gonum_org_v1_gonum_graph_EdgeRemover struct {
	WRemoveEdge func(fid int64, tid int64)
}

func (W _gonum_org_v1_gonum_graph_EdgeRemover) RemoveEdge(fid int64, tid int64) {
	W.WRemoveEdge(fid, tid)
}

// _gonum_org_v1_gonum_graph_EdgeSlicer is an interface wrapper for EdgeSlicer type
type _gonum_org_v1_gonum_graph_EdgeSlicer struct {
	WEdgeSlice func() []graph.Edge
}

func (W _gonum_org_v1_gonum_graph_EdgeSlicer) EdgeSlice() []graph.Edge { return W.WEdgeSlice() }

// _gonum_org_v1_gonum_graph_Edges is an interface wrapper for Edges type
type _gonum_org_v1_gonum_graph_Edges struct {
	WEdge  func() graph.Edge
	WLen   func() int
	WNext  func() bool
	WReset func()
}

func (W _gonum_org_v1_gonum_graph_Edges) Edge() graph.Edge { return W.WEdge() }
func (W _gonum_org_v1_gonum_graph_Edges) Len() int         { return W.WLen() }
func (W _gonum_org_v1_gonum_graph_Edges) Next() bool       { return W.WNext() }
func (W _gonum_org_v1_gonum_graph_Edges) Reset()           { W.WReset() }

// _gonum_org_v1_gonum_graph_Graph is an interface wrapper for Graph type
type _gonum_org_v1_gonum_graph_Graph struct {
	WEdge           func(uid int64, vid int64) graph.Edge
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
}

func (W _gonum_org_v1_gonum_graph_Graph) Edge(uid int64, vid int64) graph.Edge {
	return W.WEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_Graph) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_Graph) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_Graph) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_Graph) Nodes() graph.Nodes       { return W.WNodes() }

// _gonum_org_v1_gonum_graph_Iterator is an interface wrapper for Iterator type
type _gonum_org_v1_gonum_graph_Iterator struct {
	WLen   func() int
	WNext  func() bool
	WReset func()
}

func (W _gonum_org_v1_gonum_graph_Iterator) Len() int   { return W.WLen() }
func (W _gonum_org_v1_gonum_graph_Iterator) Next() bool { return W.WNext() }
func (W _gonum_org_v1_gonum_graph_Iterator) Reset()     { W.WReset() }

// _gonum_org_v1_gonum_graph_Line is an interface wrapper for Line type
type _gonum_org_v1_gonum_graph_Line struct {
	WFrom         func() graph.Node
	WID           func() int64
	WReversedLine func() graph.Line
	WTo           func() graph.Node
}

func (W _gonum_org_v1_gonum_graph_Line) From() graph.Node         { return W.WFrom() }
func (W _gonum_org_v1_gonum_graph_Line) ID() int64                { return W.WID() }
func (W _gonum_org_v1_gonum_graph_Line) ReversedLine() graph.Line { return W.WReversedLine() }
func (W _gonum_org_v1_gonum_graph_Line) To() graph.Node           { return W.WTo() }

// _gonum_org_v1_gonum_graph_LineAdder is an interface wrapper for LineAdder type
type _gonum_org_v1_gonum_graph_LineAdder struct {
	WNewLine func(from graph.Node, to graph.Node) graph.Line
	WSetLine func(l graph.Line)
}

func (W _gonum_org_v1_gonum_graph_LineAdder) NewLine(from graph.Node, to graph.Node) graph.Line {
	return W.WNewLine(from, to)
}
func (W _gonum_org_v1_gonum_graph_LineAdder) SetLine(l graph.Line) { W.WSetLine(l) }

// _gonum_org_v1_gonum_graph_LineRemover is an interface wrapper for LineRemover type
type _gonum_org_v1_gonum_graph_LineRemover struct {
	WRemoveLine func(fid int64, tid int64, id int64)
}

func (W _gonum_org_v1_gonum_graph_LineRemover) RemoveLine(fid int64, tid int64, id int64) {
	W.WRemoveLine(fid, tid, id)
}

// _gonum_org_v1_gonum_graph_LineSlicer is an interface wrapper for LineSlicer type
type _gonum_org_v1_gonum_graph_LineSlicer struct {
	WLineSlice func() []graph.Line
}

func (W _gonum_org_v1_gonum_graph_LineSlicer) LineSlice() []graph.Line { return W.WLineSlice() }

// _gonum_org_v1_gonum_graph_Lines is an interface wrapper for Lines type
type _gonum_org_v1_gonum_graph_Lines struct {
	WLen   func() int
	WLine  func() graph.Line
	WNext  func() bool
	WReset func()
}

func (W _gonum_org_v1_gonum_graph_Lines) Len() int         { return W.WLen() }
func (W _gonum_org_v1_gonum_graph_Lines) Line() graph.Line { return W.WLine() }
func (W _gonum_org_v1_gonum_graph_Lines) Next() bool       { return W.WNext() }
func (W _gonum_org_v1_gonum_graph_Lines) Reset()           { W.WReset() }

// _gonum_org_v1_gonum_graph_Multigraph is an interface wrapper for Multigraph type
type _gonum_org_v1_gonum_graph_Multigraph struct {
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WLines          func(uid int64, vid int64) graph.Lines
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
}

func (W _gonum_org_v1_gonum_graph_Multigraph) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_Multigraph) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_Multigraph) Lines(uid int64, vid int64) graph.Lines {
	return W.WLines(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_Multigraph) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_Multigraph) Nodes() graph.Nodes       { return W.WNodes() }

// _gonum_org_v1_gonum_graph_MultigraphBuilder is an interface wrapper for MultigraphBuilder type
type _gonum_org_v1_gonum_graph_MultigraphBuilder struct {
	WAddNode func(a0 graph.Node)
	WNewLine func(from graph.Node, to graph.Node) graph.Line
	WNewNode func() graph.Node
	WSetLine func(l graph.Line)
}

func (W _gonum_org_v1_gonum_graph_MultigraphBuilder) AddNode(a0 graph.Node) { W.WAddNode(a0) }
func (W _gonum_org_v1_gonum_graph_MultigraphBuilder) NewLine(from graph.Node, to graph.Node) graph.Line {
	return W.WNewLine(from, to)
}
func (W _gonum_org_v1_gonum_graph_MultigraphBuilder) NewNode() graph.Node  { return W.WNewNode() }
func (W _gonum_org_v1_gonum_graph_MultigraphBuilder) SetLine(l graph.Line) { W.WSetLine(l) }

// _gonum_org_v1_gonum_graph_Node is an interface wrapper for Node type
type _gonum_org_v1_gonum_graph_Node struct {
	WID func() int64
}

func (W _gonum_org_v1_gonum_graph_Node) ID() int64 { return W.WID() }

// _gonum_org_v1_gonum_graph_NodeAdder is an interface wrapper for NodeAdder type
type _gonum_org_v1_gonum_graph_NodeAdder struct {
	WAddNode func(a0 graph.Node)
	WNewNode func() graph.Node
}

func (W _gonum_org_v1_gonum_graph_NodeAdder) AddNode(a0 graph.Node) { W.WAddNode(a0) }
func (W _gonum_org_v1_gonum_graph_NodeAdder) NewNode() graph.Node   { return W.WNewNode() }

// _gonum_org_v1_gonum_graph_NodeRemover is an interface wrapper for NodeRemover type
type _gonum_org_v1_gonum_graph_NodeRemover struct {
	WRemoveNode func(id int64)
}

func (W _gonum_org_v1_gonum_graph_NodeRemover) RemoveNode(id int64) { W.WRemoveNode(id) }

// _gonum_org_v1_gonum_graph_NodeSlicer is an interface wrapper for NodeSlicer type
type _gonum_org_v1_gonum_graph_NodeSlicer struct {
	WNodeSlice func() []graph.Node
}

func (W _gonum_org_v1_gonum_graph_NodeSlicer) NodeSlice() []graph.Node { return W.WNodeSlice() }

// _gonum_org_v1_gonum_graph_Nodes is an interface wrapper for Nodes type
type _gonum_org_v1_gonum_graph_Nodes struct {
	WLen   func() int
	WNext  func() bool
	WNode  func() graph.Node
	WReset func()
}

func (W _gonum_org_v1_gonum_graph_Nodes) Len() int         { return W.WLen() }
func (W _gonum_org_v1_gonum_graph_Nodes) Next() bool       { return W.WNext() }
func (W _gonum_org_v1_gonum_graph_Nodes) Node() graph.Node { return W.WNode() }
func (W _gonum_org_v1_gonum_graph_Nodes) Reset()           { W.WReset() }

// _gonum_org_v1_gonum_graph_Undirected is an interface wrapper for Undirected type
type _gonum_org_v1_gonum_graph_Undirected struct {
	WEdge           func(uid int64, vid int64) graph.Edge
	WEdgeBetween    func(xid int64, yid int64) graph.Edge
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
}

func (W _gonum_org_v1_gonum_graph_Undirected) Edge(uid int64, vid int64) graph.Edge {
	return W.WEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_Undirected) EdgeBetween(xid int64, yid int64) graph.Edge {
	return W.WEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_Undirected) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_Undirected) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_Undirected) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_Undirected) Nodes() graph.Nodes       { return W.WNodes() }

// _gonum_org_v1_gonum_graph_UndirectedBuilder is an interface wrapper for UndirectedBuilder type
type _gonum_org_v1_gonum_graph_UndirectedBuilder struct {
	WAddNode        func(a0 graph.Node)
	WEdge           func(uid int64, vid int64) graph.Edge
	WEdgeBetween    func(xid int64, yid int64) graph.Edge
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WNewEdge        func(from graph.Node, to graph.Node) graph.Edge
	WNewNode        func() graph.Node
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
	WSetEdge        func(e graph.Edge)
}

func (W _gonum_org_v1_gonum_graph_UndirectedBuilder) AddNode(a0 graph.Node) { W.WAddNode(a0) }
func (W _gonum_org_v1_gonum_graph_UndirectedBuilder) Edge(uid int64, vid int64) graph.Edge {
	return W.WEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedBuilder) EdgeBetween(xid int64, yid int64) graph.Edge {
	return W.WEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedBuilder) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_UndirectedBuilder) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedBuilder) NewEdge(from graph.Node, to graph.Node) graph.Edge {
	return W.WNewEdge(from, to)
}
func (W _gonum_org_v1_gonum_graph_UndirectedBuilder) NewNode() graph.Node      { return W.WNewNode() }
func (W _gonum_org_v1_gonum_graph_UndirectedBuilder) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_UndirectedBuilder) Nodes() graph.Nodes       { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_UndirectedBuilder) SetEdge(e graph.Edge)     { W.WSetEdge(e) }

// _gonum_org_v1_gonum_graph_UndirectedMultigraph is an interface wrapper for UndirectedMultigraph type
type _gonum_org_v1_gonum_graph_UndirectedMultigraph struct {
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WLines          func(uid int64, vid int64) graph.Lines
	WLinesBetween   func(xid int64, yid int64) graph.Lines
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
}

func (W _gonum_org_v1_gonum_graph_UndirectedMultigraph) From(id int64) graph.Nodes {
	return W.WFrom(id)
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraph) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraph) Lines(uid int64, vid int64) graph.Lines {
	return W.WLines(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraph) LinesBetween(xid int64, yid int64) graph.Lines {
	return W.WLinesBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraph) Node(id int64) graph.Node {
	return W.WNode(id)
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraph) Nodes() graph.Nodes { return W.WNodes() }

// _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder is an interface wrapper for UndirectedMultigraphBuilder type
type _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder struct {
	WAddNode        func(a0 graph.Node)
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WLines          func(uid int64, vid int64) graph.Lines
	WLinesBetween   func(xid int64, yid int64) graph.Lines
	WNewLine        func(from graph.Node, to graph.Node) graph.Line
	WNewNode        func() graph.Node
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
	WSetLine        func(l graph.Line)
}

func (W _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder) AddNode(a0 graph.Node) { W.WAddNode(a0) }
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder) From(id int64) graph.Nodes {
	return W.WFrom(id)
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder) Lines(uid int64, vid int64) graph.Lines {
	return W.WLines(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder) LinesBetween(xid int64, yid int64) graph.Lines {
	return W.WLinesBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder) NewLine(from graph.Node, to graph.Node) graph.Line {
	return W.WNewLine(from, to)
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder) NewNode() graph.Node {
	return W.WNewNode()
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder) Node(id int64) graph.Node {
	return W.WNode(id)
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder) Nodes() graph.Nodes {
	return W.WNodes()
}
func (W _gonum_org_v1_gonum_graph_UndirectedMultigraphBuilder) SetLine(l graph.Line) { W.WSetLine(l) }

// _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder is an interface wrapper for UndirectedWeightedBuilder type
type _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder struct {
	WAddNode         func(a0 graph.Node)
	WEdge            func(uid int64, vid int64) graph.Edge
	WEdgeBetween     func(xid int64, yid int64) graph.Edge
	WFrom            func(id int64) graph.Nodes
	WHasEdgeBetween  func(xid int64, yid int64) bool
	WNewNode         func() graph.Node
	WNewWeightedEdge func(from graph.Node, to graph.Node, weight float64) graph.WeightedEdge
	WNode            func(id int64) graph.Node
	WNodes           func() graph.Nodes
	WSetWeightedEdge func(e graph.WeightedEdge)
}

func (W _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder) AddNode(a0 graph.Node) { W.WAddNode(a0) }
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder) Edge(uid int64, vid int64) graph.Edge {
	return W.WEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder) EdgeBetween(xid int64, yid int64) graph.Edge {
	return W.WEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder) From(id int64) graph.Nodes {
	return W.WFrom(id)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder) NewNode() graph.Node {
	return W.WNewNode()
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder) NewWeightedEdge(from graph.Node, to graph.Node, weight float64) graph.WeightedEdge {
	return W.WNewWeightedEdge(from, to, weight)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder) Node(id int64) graph.Node {
	return W.WNode(id)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder) Nodes() graph.Nodes { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedBuilder) SetWeightedEdge(e graph.WeightedEdge) {
	W.WSetWeightedEdge(e)
}

// _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder is an interface wrapper for UndirectedWeightedMultigraphBuilder type
type _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder struct {
	WAddNode         func(a0 graph.Node)
	WFrom            func(id int64) graph.Nodes
	WHasEdgeBetween  func(xid int64, yid int64) bool
	WLines           func(uid int64, vid int64) graph.Lines
	WLinesBetween    func(xid int64, yid int64) graph.Lines
	WNewNode         func() graph.Node
	WNewWeightedLine func(from graph.Node, to graph.Node, weight float64) graph.WeightedLine
	WNode            func(id int64) graph.Node
	WNodes           func() graph.Nodes
	WSetWeightedLine func(l graph.WeightedLine)
}

func (W _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder) AddNode(a0 graph.Node) {
	W.WAddNode(a0)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder) From(id int64) graph.Nodes {
	return W.WFrom(id)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder) Lines(uid int64, vid int64) graph.Lines {
	return W.WLines(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder) LinesBetween(xid int64, yid int64) graph.Lines {
	return W.WLinesBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder) NewNode() graph.Node {
	return W.WNewNode()
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder) NewWeightedLine(from graph.Node, to graph.Node, weight float64) graph.WeightedLine {
	return W.WNewWeightedLine(from, to, weight)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder) Node(id int64) graph.Node {
	return W.WNode(id)
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder) Nodes() graph.Nodes {
	return W.WNodes()
}
func (W _gonum_org_v1_gonum_graph_UndirectedWeightedMultigraphBuilder) SetWeightedLine(l graph.WeightedLine) {
	W.WSetWeightedLine(l)
}

// _gonum_org_v1_gonum_graph_Weighted is an interface wrapper for Weighted type
type _gonum_org_v1_gonum_graph_Weighted struct {
	WEdge           func(uid int64, vid int64) graph.Edge
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
	WWeight         func(xid int64, yid int64) (w float64, ok bool)
	WWeightedEdge   func(uid int64, vid int64) graph.WeightedEdge
}

func (W _gonum_org_v1_gonum_graph_Weighted) Edge(uid int64, vid int64) graph.Edge {
	return W.WEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_Weighted) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_Weighted) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_Weighted) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_Weighted) Nodes() graph.Nodes       { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_Weighted) Weight(xid int64, yid int64) (w float64, ok bool) {
	return W.WWeight(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_Weighted) WeightedEdge(uid int64, vid int64) graph.WeightedEdge {
	return W.WWeightedEdge(uid, vid)
}

// _gonum_org_v1_gonum_graph_WeightedBuilder is an interface wrapper for WeightedBuilder type
type _gonum_org_v1_gonum_graph_WeightedBuilder struct {
	WAddNode         func(a0 graph.Node)
	WNewNode         func() graph.Node
	WNewWeightedEdge func(from graph.Node, to graph.Node, weight float64) graph.WeightedEdge
	WSetWeightedEdge func(e graph.WeightedEdge)
}

func (W _gonum_org_v1_gonum_graph_WeightedBuilder) AddNode(a0 graph.Node) { W.WAddNode(a0) }
func (W _gonum_org_v1_gonum_graph_WeightedBuilder) NewNode() graph.Node   { return W.WNewNode() }
func (W _gonum_org_v1_gonum_graph_WeightedBuilder) NewWeightedEdge(from graph.Node, to graph.Node, weight float64) graph.WeightedEdge {
	return W.WNewWeightedEdge(from, to, weight)
}
func (W _gonum_org_v1_gonum_graph_WeightedBuilder) SetWeightedEdge(e graph.WeightedEdge) {
	W.WSetWeightedEdge(e)
}

// _gonum_org_v1_gonum_graph_WeightedDirected is an interface wrapper for WeightedDirected type
type _gonum_org_v1_gonum_graph_WeightedDirected struct {
	WEdge           func(uid int64, vid int64) graph.Edge
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WHasEdgeFromTo  func(uid int64, vid int64) bool
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
	WTo             func(id int64) graph.Nodes
	WWeight         func(xid int64, yid int64) (w float64, ok bool)
	WWeightedEdge   func(uid int64, vid int64) graph.WeightedEdge
}

func (W _gonum_org_v1_gonum_graph_WeightedDirected) Edge(uid int64, vid int64) graph.Edge {
	return W.WEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_WeightedDirected) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_WeightedDirected) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_WeightedDirected) HasEdgeFromTo(uid int64, vid int64) bool {
	return W.WHasEdgeFromTo(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_WeightedDirected) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_WeightedDirected) Nodes() graph.Nodes       { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_WeightedDirected) To(id int64) graph.Nodes  { return W.WTo(id) }
func (W _gonum_org_v1_gonum_graph_WeightedDirected) Weight(xid int64, yid int64) (w float64, ok bool) {
	return W.WWeight(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_WeightedDirected) WeightedEdge(uid int64, vid int64) graph.WeightedEdge {
	return W.WWeightedEdge(uid, vid)
}

// _gonum_org_v1_gonum_graph_WeightedDirectedMultigraph is an interface wrapper for WeightedDirectedMultigraph type
type _gonum_org_v1_gonum_graph_WeightedDirectedMultigraph struct {
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WHasEdgeFromTo  func(uid int64, vid int64) bool
	WLines          func(uid int64, vid int64) graph.Lines
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
	WTo             func(id int64) graph.Nodes
	WWeightedLines  func(uid int64, vid int64) graph.WeightedLines
}

func (W _gonum_org_v1_gonum_graph_WeightedDirectedMultigraph) From(id int64) graph.Nodes {
	return W.WFrom(id)
}
func (W _gonum_org_v1_gonum_graph_WeightedDirectedMultigraph) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_WeightedDirectedMultigraph) HasEdgeFromTo(uid int64, vid int64) bool {
	return W.WHasEdgeFromTo(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_WeightedDirectedMultigraph) Lines(uid int64, vid int64) graph.Lines {
	return W.WLines(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_WeightedDirectedMultigraph) Node(id int64) graph.Node {
	return W.WNode(id)
}
func (W _gonum_org_v1_gonum_graph_WeightedDirectedMultigraph) Nodes() graph.Nodes { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_WeightedDirectedMultigraph) To(id int64) graph.Nodes {
	return W.WTo(id)
}
func (W _gonum_org_v1_gonum_graph_WeightedDirectedMultigraph) WeightedLines(uid int64, vid int64) graph.WeightedLines {
	return W.WWeightedLines(uid, vid)
}

// _gonum_org_v1_gonum_graph_WeightedEdge is an interface wrapper for WeightedEdge type
type _gonum_org_v1_gonum_graph_WeightedEdge struct {
	WFrom         func() graph.Node
	WReversedEdge func() graph.Edge
	WTo           func() graph.Node
	WWeight       func() float64
}

func (W _gonum_org_v1_gonum_graph_WeightedEdge) From() graph.Node         { return W.WFrom() }
func (W _gonum_org_v1_gonum_graph_WeightedEdge) ReversedEdge() graph.Edge { return W.WReversedEdge() }
func (W _gonum_org_v1_gonum_graph_WeightedEdge) To() graph.Node           { return W.WTo() }
func (W _gonum_org_v1_gonum_graph_WeightedEdge) Weight() float64          { return W.WWeight() }

// _gonum_org_v1_gonum_graph_WeightedEdgeAdder is an interface wrapper for WeightedEdgeAdder type
type _gonum_org_v1_gonum_graph_WeightedEdgeAdder struct {
	WNewWeightedEdge func(from graph.Node, to graph.Node, weight float64) graph.WeightedEdge
	WSetWeightedEdge func(e graph.WeightedEdge)
}

func (W _gonum_org_v1_gonum_graph_WeightedEdgeAdder) NewWeightedEdge(from graph.Node, to graph.Node, weight float64) graph.WeightedEdge {
	return W.WNewWeightedEdge(from, to, weight)
}
func (W _gonum_org_v1_gonum_graph_WeightedEdgeAdder) SetWeightedEdge(e graph.WeightedEdge) {
	W.WSetWeightedEdge(e)
}

// _gonum_org_v1_gonum_graph_WeightedEdgeSlicer is an interface wrapper for WeightedEdgeSlicer type
type _gonum_org_v1_gonum_graph_WeightedEdgeSlicer struct {
	WWeightedEdgeSlice func() []graph.WeightedEdge
}

func (W _gonum_org_v1_gonum_graph_WeightedEdgeSlicer) WeightedEdgeSlice() []graph.WeightedEdge {
	return W.WWeightedEdgeSlice()
}

// _gonum_org_v1_gonum_graph_WeightedEdges is an interface wrapper for WeightedEdges type
type _gonum_org_v1_gonum_graph_WeightedEdges struct {
	WLen          func() int
	WNext         func() bool
	WReset        func()
	WWeightedEdge func() graph.WeightedEdge
}

func (W _gonum_org_v1_gonum_graph_WeightedEdges) Len() int   { return W.WLen() }
func (W _gonum_org_v1_gonum_graph_WeightedEdges) Next() bool { return W.WNext() }
func (W _gonum_org_v1_gonum_graph_WeightedEdges) Reset()     { W.WReset() }
func (W _gonum_org_v1_gonum_graph_WeightedEdges) WeightedEdge() graph.WeightedEdge {
	return W.WWeightedEdge()
}

// _gonum_org_v1_gonum_graph_WeightedLine is an interface wrapper for WeightedLine type
type _gonum_org_v1_gonum_graph_WeightedLine struct {
	WFrom         func() graph.Node
	WID           func() int64
	WReversedLine func() graph.Line
	WTo           func() graph.Node
	WWeight       func() float64
}

func (W _gonum_org_v1_gonum_graph_WeightedLine) From() graph.Node         { return W.WFrom() }
func (W _gonum_org_v1_gonum_graph_WeightedLine) ID() int64                { return W.WID() }
func (W _gonum_org_v1_gonum_graph_WeightedLine) ReversedLine() graph.Line { return W.WReversedLine() }
func (W _gonum_org_v1_gonum_graph_WeightedLine) To() graph.Node           { return W.WTo() }
func (W _gonum_org_v1_gonum_graph_WeightedLine) Weight() float64          { return W.WWeight() }

// _gonum_org_v1_gonum_graph_WeightedLineAdder is an interface wrapper for WeightedLineAdder type
type _gonum_org_v1_gonum_graph_WeightedLineAdder struct {
	WNewWeightedLine func(from graph.Node, to graph.Node, weight float64) graph.WeightedLine
	WSetWeightedLine func(l graph.WeightedLine)
}

func (W _gonum_org_v1_gonum_graph_WeightedLineAdder) NewWeightedLine(from graph.Node, to graph.Node, weight float64) graph.WeightedLine {
	return W.WNewWeightedLine(from, to, weight)
}
func (W _gonum_org_v1_gonum_graph_WeightedLineAdder) SetWeightedLine(l graph.WeightedLine) {
	W.WSetWeightedLine(l)
}

// _gonum_org_v1_gonum_graph_WeightedLineSlicer is an interface wrapper for WeightedLineSlicer type
type _gonum_org_v1_gonum_graph_WeightedLineSlicer struct {
	WWeightedLineSlice func() []graph.WeightedLine
}

func (W _gonum_org_v1_gonum_graph_WeightedLineSlicer) WeightedLineSlice() []graph.WeightedLine {
	return W.WWeightedLineSlice()
}

// _gonum_org_v1_gonum_graph_WeightedLines is an interface wrapper for WeightedLines type
type _gonum_org_v1_gonum_graph_WeightedLines struct {
	WLen          func() int
	WNext         func() bool
	WReset        func()
	WWeightedLine func() graph.WeightedLine
}

func (W _gonum_org_v1_gonum_graph_WeightedLines) Len() int   { return W.WLen() }
func (W _gonum_org_v1_gonum_graph_WeightedLines) Next() bool { return W.WNext() }
func (W _gonum_org_v1_gonum_graph_WeightedLines) Reset()     { W.WReset() }
func (W _gonum_org_v1_gonum_graph_WeightedLines) WeightedLine() graph.WeightedLine {
	return W.WWeightedLine()
}

// _gonum_org_v1_gonum_graph_WeightedMultigraph is an interface wrapper for WeightedMultigraph type
type _gonum_org_v1_gonum_graph_WeightedMultigraph struct {
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WLines          func(uid int64, vid int64) graph.Lines
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
	WWeightedLines  func(uid int64, vid int64) graph.WeightedLines
}

func (W _gonum_org_v1_gonum_graph_WeightedMultigraph) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_WeightedMultigraph) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_WeightedMultigraph) Lines(uid int64, vid int64) graph.Lines {
	return W.WLines(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_WeightedMultigraph) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_WeightedMultigraph) Nodes() graph.Nodes       { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_WeightedMultigraph) WeightedLines(uid int64, vid int64) graph.WeightedLines {
	return W.WWeightedLines(uid, vid)
}

// _gonum_org_v1_gonum_graph_WeightedMultigraphBuilder is an interface wrapper for WeightedMultigraphBuilder type
type _gonum_org_v1_gonum_graph_WeightedMultigraphBuilder struct {
	WAddNode         func(a0 graph.Node)
	WNewNode         func() graph.Node
	WNewWeightedLine func(from graph.Node, to graph.Node, weight float64) graph.WeightedLine
	WSetWeightedLine func(l graph.WeightedLine)
}

func (W _gonum_org_v1_gonum_graph_WeightedMultigraphBuilder) AddNode(a0 graph.Node) { W.WAddNode(a0) }
func (W _gonum_org_v1_gonum_graph_WeightedMultigraphBuilder) NewNode() graph.Node {
	return W.WNewNode()
}
func (W _gonum_org_v1_gonum_graph_WeightedMultigraphBuilder) NewWeightedLine(from graph.Node, to graph.Node, weight float64) graph.WeightedLine {
	return W.WNewWeightedLine(from, to, weight)
}
func (W _gonum_org_v1_gonum_graph_WeightedMultigraphBuilder) SetWeightedLine(l graph.WeightedLine) {
	W.WSetWeightedLine(l)
}

// _gonum_org_v1_gonum_graph_WeightedUndirected is an interface wrapper for WeightedUndirected type
type _gonum_org_v1_gonum_graph_WeightedUndirected struct {
	WEdge                func(uid int64, vid int64) graph.Edge
	WFrom                func(id int64) graph.Nodes
	WHasEdgeBetween      func(xid int64, yid int64) bool
	WNode                func(id int64) graph.Node
	WNodes               func() graph.Nodes
	WWeight              func(xid int64, yid int64) (w float64, ok bool)
	WWeightedEdge        func(uid int64, vid int64) graph.WeightedEdge
	WWeightedEdgeBetween func(xid int64, yid int64) graph.WeightedEdge
}

func (W _gonum_org_v1_gonum_graph_WeightedUndirected) Edge(uid int64, vid int64) graph.Edge {
	return W.WEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_WeightedUndirected) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_WeightedUndirected) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_WeightedUndirected) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_WeightedUndirected) Nodes() graph.Nodes       { return W.WNodes() }
func (W _gonum_org_v1_gonum_graph_WeightedUndirected) Weight(xid int64, yid int64) (w float64, ok bool) {
	return W.WWeight(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_WeightedUndirected) WeightedEdge(uid int64, vid int64) graph.WeightedEdge {
	return W.WWeightedEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_WeightedUndirected) WeightedEdgeBetween(xid int64, yid int64) graph.WeightedEdge {
	return W.WWeightedEdgeBetween(xid, yid)
}

// _gonum_org_v1_gonum_graph_WeightedUndirectedMultigraph is an interface wrapper for WeightedUndirectedMultigraph type
type _gonum_org_v1_gonum_graph_WeightedUndirectedMultigraph struct {
	WFrom                 func(id int64) graph.Nodes
	WHasEdgeBetween       func(xid int64, yid int64) bool
	WLines                func(uid int64, vid int64) graph.Lines
	WNode                 func(id int64) graph.Node
	WNodes                func() graph.Nodes
	WWeightedLines        func(uid int64, vid int64) graph.WeightedLines
	WWeightedLinesBetween func(xid int64, yid int64) graph.WeightedLines
}

func (W _gonum_org_v1_gonum_graph_WeightedUndirectedMultigraph) From(id int64) graph.Nodes {
	return W.WFrom(id)
}
func (W _gonum_org_v1_gonum_graph_WeightedUndirectedMultigraph) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_WeightedUndirectedMultigraph) Lines(uid int64, vid int64) graph.Lines {
	return W.WLines(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_WeightedUndirectedMultigraph) Node(id int64) graph.Node {
	return W.WNode(id)
}
func (W _gonum_org_v1_gonum_graph_WeightedUndirectedMultigraph) Nodes() graph.Nodes {
	return W.WNodes()
}
func (W _gonum_org_v1_gonum_graph_WeightedUndirectedMultigraph) WeightedLines(uid int64, vid int64) graph.WeightedLines {
	return W.WWeightedLines(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_WeightedUndirectedMultigraph) WeightedLinesBetween(xid int64, yid int64) graph.WeightedLines {
	return W.WWeightedLinesBetween(xid, yid)
}
