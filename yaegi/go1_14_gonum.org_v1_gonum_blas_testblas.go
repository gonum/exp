// Code generated by 'goexports gonum.org/v1/gonum/blas/testblas'. DO NOT EDIT.

// Copyright Â©2019 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build go1.14,!go1.15

package yaegi

import (
	"reflect"

	"gonum.org/v1/gonum/blas"
	"gonum.org/v1/gonum/blas/testblas"
)

func init() {
	Symbols["gonum.org/v1/gonum/blas/testblas"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DasumTest":            reflect.ValueOf(testblas.DasumTest),
		"DaxpyTest":            reflect.ValueOf(testblas.DaxpyTest),
		"DcopyTest":            reflect.ValueOf(testblas.DcopyTest),
		"DdotTest":             reflect.ValueOf(testblas.DdotTest),
		"DgbmvTest":            reflect.ValueOf(testblas.DgbmvTest),
		"DgemmBenchmark":       reflect.ValueOf(testblas.DgemmBenchmark),
		"DgemmCases":           reflect.ValueOf(&testblas.DgemmCases).Elem(),
		"DgemvBenchmark":       reflect.ValueOf(testblas.DgemvBenchmark),
		"DgemvCases":           reflect.ValueOf(&testblas.DgemvCases).Elem(),
		"DgemvTest":            reflect.ValueOf(testblas.DgemvTest),
		"DgerBenchmark":        reflect.ValueOf(testblas.DgerBenchmark),
		"DgerTest":             reflect.ValueOf(testblas.DgerTest),
		"Dnrm2Test":            reflect.ValueOf(testblas.Dnrm2Test),
		"DoubleOneVectorCases": reflect.ValueOf(&testblas.DoubleOneVectorCases).Elem(),
		"DoubleTwoVectorCases": reflect.ValueOf(&testblas.DoubleTwoVectorCases).Elem(),
		"DrotTest":             reflect.ValueOf(testblas.DrotTest),
		"DrotgTest":            reflect.ValueOf(testblas.DrotgTest),
		"DrotgTests":           reflect.ValueOf(&testblas.DrotgTests).Elem(),
		"DrotmTest":            reflect.ValueOf(testblas.DrotmTest),
		"DrotmgTest":           reflect.ValueOf(testblas.DrotmgTest),
		"DrotmgTests":          reflect.ValueOf(&testblas.DrotmgTests).Elem(),
		"DsbmvTest":            reflect.ValueOf(testblas.DsbmvTest),
		"DscalTest":            reflect.ValueOf(testblas.DscalTest),
		"DspmvTest":            reflect.ValueOf(testblas.DspmvTest),
		"Dspr2Test":            reflect.ValueOf(testblas.Dspr2Test),
		"DsprTest":             reflect.ValueOf(testblas.DsprTest),
		"DswapTest":            reflect.ValueOf(testblas.DswapTest),
		"DsymmTest":            reflect.ValueOf(testblas.DsymmTest),
		"DsymvTest":            reflect.ValueOf(testblas.DsymvTest),
		"Dsyr2Test":            reflect.ValueOf(testblas.Dsyr2Test),
		"Dsyr2kTest":           reflect.ValueOf(testblas.Dsyr2kTest),
		"DsyrTest":             reflect.ValueOf(testblas.DsyrTest),
		"DsyrkTest":            reflect.ValueOf(testblas.DsyrkTest),
		"DtbmvTest":            reflect.ValueOf(testblas.DtbmvTest),
		"DtbsvTest":            reflect.ValueOf(testblas.DtbsvTest),
		"DtpmvTest":            reflect.ValueOf(testblas.DtpmvTest),
		"DtpsvTest":            reflect.ValueOf(testblas.DtpsvTest),
		"DtrmmTest":            reflect.ValueOf(testblas.DtrmmTest),
		"DtrmvBenchmark":       reflect.ValueOf(testblas.DtrmvBenchmark),
		"DtrmvTest":            reflect.ValueOf(testblas.DtrmvTest),
		"DtrsmTest":            reflect.ValueOf(testblas.DtrsmTest),
		"DtrsvTest":            reflect.ValueOf(testblas.DtrsvTest),
		"DtxmvTest":            reflect.ValueOf(testblas.DtxmvTest),
		"DzasumTest":           reflect.ValueOf(testblas.DzasumTest),
		"Dznrm2Test":           reflect.ValueOf(testblas.Dznrm2Test),
		"HugeMat":              reflect.ValueOf(testblas.HugeMat),
		"IdamaxTest":           reflect.ValueOf(testblas.IdamaxTest),
		"IzamaxTest":           reflect.ValueOf(testblas.IzamaxTest),
		"LargeMat":             reflect.ValueOf(testblas.LargeMat),
		"MediumMat":            reflect.ValueOf(testblas.MediumMat),
		"SgerBenchmark":        reflect.ValueOf(testblas.SgerBenchmark),
		"SmallMat":             reflect.ValueOf(testblas.SmallMat),
		"TestDgemm":            reflect.ValueOf(testblas.TestDgemm),
		"ZaxpyTest":            reflect.ValueOf(testblas.ZaxpyTest),
		"ZcopyTest":            reflect.ValueOf(testblas.ZcopyTest),
		"ZdotcTest":            reflect.ValueOf(testblas.ZdotcTest),
		"ZdotuTest":            reflect.ValueOf(testblas.ZdotuTest),
		"ZdscalTest":           reflect.ValueOf(testblas.ZdscalTest),
		"ZgbmvTest":            reflect.ValueOf(testblas.ZgbmvTest),
		"ZgemmTest":            reflect.ValueOf(testblas.ZgemmTest),
		"ZgemvTest":            reflect.ValueOf(testblas.ZgemvTest),
		"ZgercTest":            reflect.ValueOf(testblas.ZgercTest),
		"ZgeruTest":            reflect.ValueOf(testblas.ZgeruTest),
		"ZhbmvTest":            reflect.ValueOf(testblas.ZhbmvTest),
		"ZhemmTest":            reflect.ValueOf(testblas.ZhemmTest),
		"ZhemvTest":            reflect.ValueOf(testblas.ZhemvTest),
		"Zher2Test":            reflect.ValueOf(testblas.Zher2Test),
		"Zher2kTest":           reflect.ValueOf(testblas.Zher2kTest),
		"ZherTest":             reflect.ValueOf(testblas.ZherTest),
		"ZherkTest":            reflect.ValueOf(testblas.ZherkTest),
		"ZhpmvTest":            reflect.ValueOf(testblas.ZhpmvTest),
		"Zhpr2Test":            reflect.ValueOf(testblas.Zhpr2Test),
		"ZhprTest":             reflect.ValueOf(testblas.ZhprTest),
		"ZscalTest":            reflect.ValueOf(testblas.ZscalTest),
		"ZswapTest":            reflect.ValueOf(testblas.ZswapTest),
		"ZsymmTest":            reflect.ValueOf(testblas.ZsymmTest),
		"Zsyr2kTest":           reflect.ValueOf(testblas.Zsyr2kTest),
		"ZsyrkTest":            reflect.ValueOf(testblas.ZsyrkTest),
		"ZtbmvTest":            reflect.ValueOf(testblas.ZtbmvTest),
		"ZtbsvTest":            reflect.ValueOf(testblas.ZtbsvTest),
		"ZtpmvTest":            reflect.ValueOf(testblas.ZtpmvTest),
		"ZtpsvTest":            reflect.ValueOf(testblas.ZtpsvTest),
		"ZtrmmTest":            reflect.ValueOf(testblas.ZtrmmTest),
		"ZtrmvTest":            reflect.ValueOf(testblas.ZtrmvTest),
		"ZtrsmTest":            reflect.ValueOf(testblas.ZtrsmTest),
		"ZtrsvTest":            reflect.ValueOf(testblas.ZtrsvTest),

		// type definitions
		"DScalCase":           reflect.ValueOf((*testblas.DScalCase)(nil)),
		"DTwoVecAnswer":       reflect.ValueOf((*testblas.DTwoVecAnswer)(nil)),
		"Dasumer":             reflect.ValueOf((*testblas.Dasumer)(nil)),
		"DaxpyCase":           reflect.ValueOf((*testblas.DaxpyCase)(nil)),
		"Daxpyer":             reflect.ValueOf((*testblas.Daxpyer)(nil)),
		"Dcopier":             reflect.ValueOf((*testblas.Dcopier)(nil)),
		"Ddotter":             reflect.ValueOf((*testblas.Ddotter)(nil)),
		"Dgbmver":             reflect.ValueOf((*testblas.Dgbmver)(nil)),
		"DgemmCase":           reflect.ValueOf((*testblas.DgemmCase)(nil)),
		"Dgemmer":             reflect.ValueOf((*testblas.Dgemmer)(nil)),
		"DgemvCase":           reflect.ValueOf((*testblas.DgemvCase)(nil)),
		"DgemvSubcase":        reflect.ValueOf((*testblas.DgemvSubcase)(nil)),
		"Dgemver":             reflect.ValueOf((*testblas.Dgemver)(nil)),
		"Dgerer":              reflect.ValueOf((*testblas.Dgerer)(nil)),
		"Dnrm2er":             reflect.ValueOf((*testblas.Dnrm2er)(nil)),
		"DoubleOneVectorCase": reflect.ValueOf((*testblas.DoubleOneVectorCase)(nil)),
		"DoubleTwoVectorCase": reflect.ValueOf((*testblas.DoubleTwoVectorCase)(nil)),
		"DrotCase":            reflect.ValueOf((*testblas.DrotCase)(nil)),
		"Droter":              reflect.ValueOf((*testblas.Droter)(nil)),
		"DrotgTestStruct":     reflect.ValueOf((*testblas.DrotgTestStruct)(nil)),
		"Drotger":             reflect.ValueOf((*testblas.Drotger)(nil)),
		"DrotmCase":           reflect.ValueOf((*testblas.DrotmCase)(nil)),
		"Drotmer":             reflect.ValueOf((*testblas.Drotmer)(nil)),
		"DrotmgTestStruct":    reflect.ValueOf((*testblas.DrotmgTestStruct)(nil)),
		"Drotmger":            reflect.ValueOf((*testblas.Drotmger)(nil)),
		"Dsbmver":             reflect.ValueOf((*testblas.Dsbmver)(nil)),
		"Dscaler":             reflect.ValueOf((*testblas.Dscaler)(nil)),
		"Dspmver":             reflect.ValueOf((*testblas.Dspmver)(nil)),
		"Dspr2er":             reflect.ValueOf((*testblas.Dspr2er)(nil)),
		"Dsprer":              reflect.ValueOf((*testblas.Dsprer)(nil)),
		"Dswapper":            reflect.ValueOf((*testblas.Dswapper)(nil)),
		"Dsyker":              reflect.ValueOf((*testblas.Dsyker)(nil)),
		"Dsymmer":             reflect.ValueOf((*testblas.Dsymmer)(nil)),
		"Dsymver":             reflect.ValueOf((*testblas.Dsymver)(nil)),
		"Dsyr2er":             reflect.ValueOf((*testblas.Dsyr2er)(nil)),
		"Dsyr2ker":            reflect.ValueOf((*testblas.Dsyr2ker)(nil)),
		"Dsyrer":              reflect.ValueOf((*testblas.Dsyrer)(nil)),
		"Dtbmver":             reflect.ValueOf((*testblas.Dtbmver)(nil)),
		"Dtbsver":             reflect.ValueOf((*testblas.Dtbsver)(nil)),
		"Dtpmver":             reflect.ValueOf((*testblas.Dtpmver)(nil)),
		"Dtpsver":             reflect.ValueOf((*testblas.Dtpsver)(nil)),
		"Dtrmmer":             reflect.ValueOf((*testblas.Dtrmmer)(nil)),
		"Dtrmver":             reflect.ValueOf((*testblas.Dtrmver)(nil)),
		"Dtrsmer":             reflect.ValueOf((*testblas.Dtrsmer)(nil)),
		"Dtrsver":             reflect.ValueOf((*testblas.Dtrsver)(nil)),
		"Dtxmver":             reflect.ValueOf((*testblas.Dtxmver)(nil)),
		"Dzasumer":            reflect.ValueOf((*testblas.Dzasumer)(nil)),
		"Dznrm2er":            reflect.ValueOf((*testblas.Dznrm2er)(nil)),
		"Idamaxer":            reflect.ValueOf((*testblas.Idamaxer)(nil)),
		"Izamaxer":            reflect.ValueOf((*testblas.Izamaxer)(nil)),
		"Sgerer":              reflect.ValueOf((*testblas.Sgerer)(nil)),
		"Zaxpyer":             reflect.ValueOf((*testblas.Zaxpyer)(nil)),
		"Zcopyer":             reflect.ValueOf((*testblas.Zcopyer)(nil)),
		"Zdotcer":             reflect.ValueOf((*testblas.Zdotcer)(nil)),
		"Zdotuer":             reflect.ValueOf((*testblas.Zdotuer)(nil)),
		"Zdscaler":            reflect.ValueOf((*testblas.Zdscaler)(nil)),
		"Zgbmver":             reflect.ValueOf((*testblas.Zgbmver)(nil)),
		"Zgemmer":             reflect.ValueOf((*testblas.Zgemmer)(nil)),
		"Zgemver":             reflect.ValueOf((*testblas.Zgemver)(nil)),
		"Zgercer":             reflect.ValueOf((*testblas.Zgercer)(nil)),
		"Zgeruer":             reflect.ValueOf((*testblas.Zgeruer)(nil)),
		"Zhbmver":             reflect.ValueOf((*testblas.Zhbmver)(nil)),
		"Zhemmer":             reflect.ValueOf((*testblas.Zhemmer)(nil)),
		"Zhemver":             reflect.ValueOf((*testblas.Zhemver)(nil)),
		"Zher2er":             reflect.ValueOf((*testblas.Zher2er)(nil)),
		"Zher2ker":            reflect.ValueOf((*testblas.Zher2ker)(nil)),
		"Zherer":              reflect.ValueOf((*testblas.Zherer)(nil)),
		"Zherker":             reflect.ValueOf((*testblas.Zherker)(nil)),
		"Zhpmver":             reflect.ValueOf((*testblas.Zhpmver)(nil)),
		"Zhpr2er":             reflect.ValueOf((*testblas.Zhpr2er)(nil)),
		"Zhprer":              reflect.ValueOf((*testblas.Zhprer)(nil)),
		"Zscaler":             reflect.ValueOf((*testblas.Zscaler)(nil)),
		"Zswaper":             reflect.ValueOf((*testblas.Zswaper)(nil)),
		"Zsymmer":             reflect.ValueOf((*testblas.Zsymmer)(nil)),
		"Zsyr2ker":            reflect.ValueOf((*testblas.Zsyr2ker)(nil)),
		"Zsyrker":             reflect.ValueOf((*testblas.Zsyrker)(nil)),
		"Ztbmver":             reflect.ValueOf((*testblas.Ztbmver)(nil)),
		"Ztbsver":             reflect.ValueOf((*testblas.Ztbsver)(nil)),
		"Ztpmver":             reflect.ValueOf((*testblas.Ztpmver)(nil)),
		"Ztpsver":             reflect.ValueOf((*testblas.Ztpsver)(nil)),
		"Ztrmmer":             reflect.ValueOf((*testblas.Ztrmmer)(nil)),
		"Ztrmver":             reflect.ValueOf((*testblas.Ztrmver)(nil)),
		"Ztrsmer":             reflect.ValueOf((*testblas.Ztrsmer)(nil)),
		"Ztrsver":             reflect.ValueOf((*testblas.Ztrsver)(nil)),

		// interface wrapper definitions
		"_Dasumer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dasumer)(nil)),
		"_Daxpyer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Daxpyer)(nil)),
		"_Dcopier":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dcopier)(nil)),
		"_Ddotter":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Ddotter)(nil)),
		"_Dgbmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dgbmver)(nil)),
		"_Dgemmer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dgemmer)(nil)),
		"_Dgemver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dgemver)(nil)),
		"_Dgerer":   reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dgerer)(nil)),
		"_Dnrm2er":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dnrm2er)(nil)),
		"_Droter":   reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Droter)(nil)),
		"_Drotger":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Drotger)(nil)),
		"_Drotmer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Drotmer)(nil)),
		"_Drotmger": reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Drotmger)(nil)),
		"_Dsbmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dsbmver)(nil)),
		"_Dscaler":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dscaler)(nil)),
		"_Dspmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dspmver)(nil)),
		"_Dspr2er":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dspr2er)(nil)),
		"_Dsprer":   reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dsprer)(nil)),
		"_Dswapper": reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dswapper)(nil)),
		"_Dsyker":   reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dsyker)(nil)),
		"_Dsymmer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dsymmer)(nil)),
		"_Dsymver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dsymver)(nil)),
		"_Dsyr2er":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dsyr2er)(nil)),
		"_Dsyr2ker": reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dsyr2ker)(nil)),
		"_Dsyrer":   reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dsyrer)(nil)),
		"_Dtbmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dtbmver)(nil)),
		"_Dtbsver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dtbsver)(nil)),
		"_Dtpmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dtpmver)(nil)),
		"_Dtpsver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dtpsver)(nil)),
		"_Dtrmmer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dtrmmer)(nil)),
		"_Dtrmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dtrmver)(nil)),
		"_Dtrsmer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dtrsmer)(nil)),
		"_Dtrsver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dtrsver)(nil)),
		"_Dtxmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dtxmver)(nil)),
		"_Dzasumer": reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dzasumer)(nil)),
		"_Dznrm2er": reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Dznrm2er)(nil)),
		"_Idamaxer": reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Idamaxer)(nil)),
		"_Izamaxer": reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Izamaxer)(nil)),
		"_Sgerer":   reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Sgerer)(nil)),
		"_Zaxpyer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zaxpyer)(nil)),
		"_Zcopyer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zcopyer)(nil)),
		"_Zdotcer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zdotcer)(nil)),
		"_Zdotuer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zdotuer)(nil)),
		"_Zdscaler": reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zdscaler)(nil)),
		"_Zgbmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zgbmver)(nil)),
		"_Zgemmer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zgemmer)(nil)),
		"_Zgemver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zgemver)(nil)),
		"_Zgercer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zgercer)(nil)),
		"_Zgeruer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zgeruer)(nil)),
		"_Zhbmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zhbmver)(nil)),
		"_Zhemmer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zhemmer)(nil)),
		"_Zhemver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zhemver)(nil)),
		"_Zher2er":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zher2er)(nil)),
		"_Zher2ker": reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zher2ker)(nil)),
		"_Zherer":   reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zherer)(nil)),
		"_Zherker":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zherker)(nil)),
		"_Zhpmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zhpmver)(nil)),
		"_Zhpr2er":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zhpr2er)(nil)),
		"_Zhprer":   reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zhprer)(nil)),
		"_Zscaler":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zscaler)(nil)),
		"_Zswaper":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zswaper)(nil)),
		"_Zsymmer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zsymmer)(nil)),
		"_Zsyr2ker": reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zsyr2ker)(nil)),
		"_Zsyrker":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Zsyrker)(nil)),
		"_Ztbmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Ztbmver)(nil)),
		"_Ztbsver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Ztbsver)(nil)),
		"_Ztpmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Ztpmver)(nil)),
		"_Ztpsver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Ztpsver)(nil)),
		"_Ztrmmer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Ztrmmer)(nil)),
		"_Ztrmver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Ztrmver)(nil)),
		"_Ztrsmer":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Ztrsmer)(nil)),
		"_Ztrsver":  reflect.ValueOf((*_gonum_org_v1_gonum_blas_testblas_Ztrsver)(nil)),
	}
}

// _gonum_org_v1_gonum_blas_testblas_Dasumer is an interface wrapper for Dasumer type
type _gonum_org_v1_gonum_blas_testblas_Dasumer struct {
	WDasum func(n int, x []float64, incX int) float64
}

func (W _gonum_org_v1_gonum_blas_testblas_Dasumer) Dasum(n int, x []float64, incX int) float64 {
	return W.WDasum(n, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Daxpyer is an interface wrapper for Daxpyer type
type _gonum_org_v1_gonum_blas_testblas_Daxpyer struct {
	WDaxpy func(n int, alpha float64, x []float64, incX int, y []float64, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Daxpyer) Daxpy(n int, alpha float64, x []float64, incX int, y []float64, incY int) {
	W.WDaxpy(n, alpha, x, incX, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Dcopier is an interface wrapper for Dcopier type
type _gonum_org_v1_gonum_blas_testblas_Dcopier struct {
	WDcopy func(n int, x []float64, incX int, y []float64, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dcopier) Dcopy(n int, x []float64, incX int, y []float64, incY int) {
	W.WDcopy(n, x, incX, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Ddotter is an interface wrapper for Ddotter type
type _gonum_org_v1_gonum_blas_testblas_Ddotter struct {
	WDdot func(n int, x []float64, incX int, y []float64, incY int) float64
}

func (W _gonum_org_v1_gonum_blas_testblas_Ddotter) Ddot(n int, x []float64, incX int, y []float64, incY int) float64 {
	return W.WDdot(n, x, incX, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Dgbmver is an interface wrapper for Dgbmver type
type _gonum_org_v1_gonum_blas_testblas_Dgbmver struct {
	WDgbmv func(tA blas.Transpose, m int, n int, kL int, kU int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dgbmver) Dgbmv(tA blas.Transpose, m int, n int, kL int, kU int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDgbmv(tA, m, n, kL, kU, alpha, a, lda, x, incX, beta, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Dgemmer is an interface wrapper for Dgemmer type
type _gonum_org_v1_gonum_blas_testblas_Dgemmer struct {
	WDgemm func(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dgemmer) Dgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	W.WDgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

// _gonum_org_v1_gonum_blas_testblas_Dgemver is an interface wrapper for Dgemver type
type _gonum_org_v1_gonum_blas_testblas_Dgemver struct {
	WDgemv func(tA blas.Transpose, m int, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dgemver) Dgemv(tA blas.Transpose, m int, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDgemv(tA, m, n, alpha, a, lda, x, incX, beta, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Dgerer is an interface wrapper for Dgerer type
type _gonum_org_v1_gonum_blas_testblas_Dgerer struct {
	WDger func(m int, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dgerer) Dger(m int, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int) {
	W.WDger(m, n, alpha, x, incX, y, incY, a, lda)
}

// _gonum_org_v1_gonum_blas_testblas_Dnrm2er is an interface wrapper for Dnrm2er type
type _gonum_org_v1_gonum_blas_testblas_Dnrm2er struct {
	WDnrm2 func(n int, x []float64, incX int) float64
}

func (W _gonum_org_v1_gonum_blas_testblas_Dnrm2er) Dnrm2(n int, x []float64, incX int) float64 {
	return W.WDnrm2(n, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Droter is an interface wrapper for Droter type
type _gonum_org_v1_gonum_blas_testblas_Droter struct {
	WDrot func(n int, x []float64, incX int, y []float64, incY int, c float64, s float64)
}

func (W _gonum_org_v1_gonum_blas_testblas_Droter) Drot(n int, x []float64, incX int, y []float64, incY int, c float64, s float64) {
	W.WDrot(n, x, incX, y, incY, c, s)
}

// _gonum_org_v1_gonum_blas_testblas_Drotger is an interface wrapper for Drotger type
type _gonum_org_v1_gonum_blas_testblas_Drotger struct {
	WDrotg func(a float64, b float64) (c float64, s float64, r float64, z float64)
}

func (W _gonum_org_v1_gonum_blas_testblas_Drotger) Drotg(a float64, b float64) (c float64, s float64, r float64, z float64) {
	return W.WDrotg(a, b)
}

// _gonum_org_v1_gonum_blas_testblas_Drotmer is an interface wrapper for Drotmer type
type _gonum_org_v1_gonum_blas_testblas_Drotmer struct {
	WDrotm func(n int, x []float64, incX int, y []float64, incY int, p blas.DrotmParams)
}

func (W _gonum_org_v1_gonum_blas_testblas_Drotmer) Drotm(n int, x []float64, incX int, y []float64, incY int, p blas.DrotmParams) {
	W.WDrotm(n, x, incX, y, incY, p)
}

// _gonum_org_v1_gonum_blas_testblas_Drotmger is an interface wrapper for Drotmger type
type _gonum_org_v1_gonum_blas_testblas_Drotmger struct {
	WDrotm  func(n int, x []float64, incX int, y []float64, incY int, p blas.DrotmParams)
	WDrotmg func(d1 float64, d2 float64, x1 float64, y1 float64) (p blas.DrotmParams, rd1 float64, rd2 float64, rx1 float64)
}

func (W _gonum_org_v1_gonum_blas_testblas_Drotmger) Drotm(n int, x []float64, incX int, y []float64, incY int, p blas.DrotmParams) {
	W.WDrotm(n, x, incX, y, incY, p)
}
func (W _gonum_org_v1_gonum_blas_testblas_Drotmger) Drotmg(d1 float64, d2 float64, x1 float64, y1 float64) (p blas.DrotmParams, rd1 float64, rd2 float64, rx1 float64) {
	return W.WDrotmg(d1, d2, x1, y1)
}

// _gonum_org_v1_gonum_blas_testblas_Dsbmver is an interface wrapper for Dsbmver type
type _gonum_org_v1_gonum_blas_testblas_Dsbmver struct {
	WDsbmv func(ul blas.Uplo, n int, k int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dsbmver) Dsbmv(ul blas.Uplo, n int, k int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDsbmv(ul, n, k, alpha, a, lda, x, incX, beta, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Dscaler is an interface wrapper for Dscaler type
type _gonum_org_v1_gonum_blas_testblas_Dscaler struct {
	WDscal func(n int, alpha float64, x []float64, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dscaler) Dscal(n int, alpha float64, x []float64, incX int) {
	W.WDscal(n, alpha, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Dspmver is an interface wrapper for Dspmver type
type _gonum_org_v1_gonum_blas_testblas_Dspmver struct {
	WDspmv func(ul blas.Uplo, n int, alpha float64, ap []float64, x []float64, incX int, beta float64, y []float64, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dspmver) Dspmv(ul blas.Uplo, n int, alpha float64, ap []float64, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDspmv(ul, n, alpha, ap, x, incX, beta, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Dspr2er is an interface wrapper for Dspr2er type
type _gonum_org_v1_gonum_blas_testblas_Dspr2er struct {
	WDspr2 func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dspr2er) Dspr2(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64) {
	W.WDspr2(ul, n, alpha, x, incX, y, incY, a)
}

// _gonum_org_v1_gonum_blas_testblas_Dsprer is an interface wrapper for Dsprer type
type _gonum_org_v1_gonum_blas_testblas_Dsprer struct {
	WDspr func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, a []float64)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dsprer) Dspr(ul blas.Uplo, n int, alpha float64, x []float64, incX int, a []float64) {
	W.WDspr(ul, n, alpha, x, incX, a)
}

// _gonum_org_v1_gonum_blas_testblas_Dswapper is an interface wrapper for Dswapper type
type _gonum_org_v1_gonum_blas_testblas_Dswapper struct {
	WDswap func(n int, x []float64, incX int, y []float64, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dswapper) Dswap(n int, x []float64, incX int, y []float64, incY int) {
	W.WDswap(n, x, incX, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Dsyker is an interface wrapper for Dsyker type
type _gonum_org_v1_gonum_blas_testblas_Dsyker struct {
	WDsyrk func(ul blas.Uplo, tA blas.Transpose, n int, k int, alpha float64, a []float64, lda int, beta float64, c []float64, ldc int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dsyker) Dsyrk(ul blas.Uplo, tA blas.Transpose, n int, k int, alpha float64, a []float64, lda int, beta float64, c []float64, ldc int) {
	W.WDsyrk(ul, tA, n, k, alpha, a, lda, beta, c, ldc)
}

// _gonum_org_v1_gonum_blas_testblas_Dsymmer is an interface wrapper for Dsymmer type
type _gonum_org_v1_gonum_blas_testblas_Dsymmer struct {
	WDsymm func(s blas.Side, ul blas.Uplo, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dsymmer) Dsymm(s blas.Side, ul blas.Uplo, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	W.WDsymm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

// _gonum_org_v1_gonum_blas_testblas_Dsymver is an interface wrapper for Dsymver type
type _gonum_org_v1_gonum_blas_testblas_Dsymver struct {
	WDsymv func(ul blas.Uplo, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dsymver) Dsymv(ul blas.Uplo, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	W.WDsymv(ul, n, alpha, a, lda, x, incX, beta, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Dsyr2er is an interface wrapper for Dsyr2er type
type _gonum_org_v1_gonum_blas_testblas_Dsyr2er struct {
	WDsyr2 func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dsyr2er) Dsyr2(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int) {
	W.WDsyr2(ul, n, alpha, x, incX, y, incY, a, lda)
}

// _gonum_org_v1_gonum_blas_testblas_Dsyr2ker is an interface wrapper for Dsyr2ker type
type _gonum_org_v1_gonum_blas_testblas_Dsyr2ker struct {
	WDsyr2k func(ul blas.Uplo, tA blas.Transpose, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dsyr2ker) Dsyr2k(ul blas.Uplo, tA blas.Transpose, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	W.WDsyr2k(ul, tA, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

// _gonum_org_v1_gonum_blas_testblas_Dsyrer is an interface wrapper for Dsyrer type
type _gonum_org_v1_gonum_blas_testblas_Dsyrer struct {
	WDsyr func(ul blas.Uplo, n int, alpha float64, x []float64, incX int, a []float64, lda int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dsyrer) Dsyr(ul blas.Uplo, n int, alpha float64, x []float64, incX int, a []float64, lda int) {
	W.WDsyr(ul, n, alpha, x, incX, a, lda)
}

// _gonum_org_v1_gonum_blas_testblas_Dtbmver is an interface wrapper for Dtbmver type
type _gonum_org_v1_gonum_blas_testblas_Dtbmver struct {
	WDtbmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dtbmver) Dtbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int) {
	W.WDtbmv(ul, tA, d, n, k, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Dtbsver is an interface wrapper for Dtbsver type
type _gonum_org_v1_gonum_blas_testblas_Dtbsver struct {
	WDtbsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int)
	WDtrsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dtbsver) Dtbsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int) {
	W.WDtbsv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_testblas_Dtbsver) Dtrsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int) {
	W.WDtrsv(ul, tA, d, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Dtpmver is an interface wrapper for Dtpmver type
type _gonum_org_v1_gonum_blas_testblas_Dtpmver struct {
	WDtpmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dtpmver) Dtpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int) {
	W.WDtpmv(ul, tA, d, n, ap, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Dtpsver is an interface wrapper for Dtpsver type
type _gonum_org_v1_gonum_blas_testblas_Dtpsver struct {
	WDtpsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dtpsver) Dtpsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int) {
	W.WDtpsv(ul, tA, d, n, ap, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Dtrmmer is an interface wrapper for Dtrmmer type
type _gonum_org_v1_gonum_blas_testblas_Dtrmmer struct {
	WDtrmm func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dtrmmer) Dtrmm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int) {
	W.WDtrmm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}

// _gonum_org_v1_gonum_blas_testblas_Dtrmver is an interface wrapper for Dtrmver type
type _gonum_org_v1_gonum_blas_testblas_Dtrmver struct {
	WDtrmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dtrmver) Dtrmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int) {
	W.WDtrmv(ul, tA, d, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Dtrsmer is an interface wrapper for Dtrsmer type
type _gonum_org_v1_gonum_blas_testblas_Dtrsmer struct {
	WDtrsm func(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dtrsmer) Dtrsm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int) {
	W.WDtrsm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)
}

// _gonum_org_v1_gonum_blas_testblas_Dtrsver is an interface wrapper for Dtrsver type
type _gonum_org_v1_gonum_blas_testblas_Dtrsver struct {
	WDtrsv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dtrsver) Dtrsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int) {
	W.WDtrsv(ul, tA, d, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Dtxmver is an interface wrapper for Dtxmver type
type _gonum_org_v1_gonum_blas_testblas_Dtxmver struct {
	WDtbmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int)
	WDtpmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, x []float64, incX int)
	WDtrmv func(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Dtxmver) Dtbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int) {
	W.WDtbmv(ul, tA, d, n, k, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_testblas_Dtxmver) Dtpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, x []float64, incX int) {
	W.WDtpmv(ul, tA, d, n, a, x, incX)
}
func (W _gonum_org_v1_gonum_blas_testblas_Dtxmver) Dtrmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int) {
	W.WDtrmv(ul, tA, d, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Dzasumer is an interface wrapper for Dzasumer type
type _gonum_org_v1_gonum_blas_testblas_Dzasumer struct {
	WDzasum func(n int, x []complex128, incX int) float64
}

func (W _gonum_org_v1_gonum_blas_testblas_Dzasumer) Dzasum(n int, x []complex128, incX int) float64 {
	return W.WDzasum(n, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Dznrm2er is an interface wrapper for Dznrm2er type
type _gonum_org_v1_gonum_blas_testblas_Dznrm2er struct {
	WDnrm2  func(n int, x []float64, incX int) float64
	WDznrm2 func(n int, x []complex128, incX int) float64
}

func (W _gonum_org_v1_gonum_blas_testblas_Dznrm2er) Dnrm2(n int, x []float64, incX int) float64 {
	return W.WDnrm2(n, x, incX)
}
func (W _gonum_org_v1_gonum_blas_testblas_Dznrm2er) Dznrm2(n int, x []complex128, incX int) float64 {
	return W.WDznrm2(n, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Idamaxer is an interface wrapper for Idamaxer type
type _gonum_org_v1_gonum_blas_testblas_Idamaxer struct {
	WIdamax func(n int, x []float64, incX int) int
}

func (W _gonum_org_v1_gonum_blas_testblas_Idamaxer) Idamax(n int, x []float64, incX int) int {
	return W.WIdamax(n, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Izamaxer is an interface wrapper for Izamaxer type
type _gonum_org_v1_gonum_blas_testblas_Izamaxer struct {
	WIzamax func(n int, x []complex128, incX int) int
}

func (W _gonum_org_v1_gonum_blas_testblas_Izamaxer) Izamax(n int, x []complex128, incX int) int {
	return W.WIzamax(n, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Sgerer is an interface wrapper for Sgerer type
type _gonum_org_v1_gonum_blas_testblas_Sgerer struct {
	WSger func(m int, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Sgerer) Sger(m int, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int) {
	W.WSger(m, n, alpha, x, incX, y, incY, a, lda)
}

// _gonum_org_v1_gonum_blas_testblas_Zaxpyer is an interface wrapper for Zaxpyer type
type _gonum_org_v1_gonum_blas_testblas_Zaxpyer struct {
	WZaxpy func(n int, alpha complex128, x []complex128, incX int, y []complex128, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zaxpyer) Zaxpy(n int, alpha complex128, x []complex128, incX int, y []complex128, incY int) {
	W.WZaxpy(n, alpha, x, incX, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Zcopyer is an interface wrapper for Zcopyer type
type _gonum_org_v1_gonum_blas_testblas_Zcopyer struct {
	WZcopy func(n int, x []complex128, incX int, y []complex128, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zcopyer) Zcopy(n int, x []complex128, incX int, y []complex128, incY int) {
	W.WZcopy(n, x, incX, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Zdotcer is an interface wrapper for Zdotcer type
type _gonum_org_v1_gonum_blas_testblas_Zdotcer struct {
	WZdotc func(n int, x []complex128, incX int, y []complex128, incY int) complex128
}

func (W _gonum_org_v1_gonum_blas_testblas_Zdotcer) Zdotc(n int, x []complex128, incX int, y []complex128, incY int) complex128 {
	return W.WZdotc(n, x, incX, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Zdotuer is an interface wrapper for Zdotuer type
type _gonum_org_v1_gonum_blas_testblas_Zdotuer struct {
	WZdotu func(n int, x []complex128, incX int, y []complex128, incY int) complex128
}

func (W _gonum_org_v1_gonum_blas_testblas_Zdotuer) Zdotu(n int, x []complex128, incX int, y []complex128, incY int) complex128 {
	return W.WZdotu(n, x, incX, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Zdscaler is an interface wrapper for Zdscaler type
type _gonum_org_v1_gonum_blas_testblas_Zdscaler struct {
	WZdscal func(n int, alpha float64, x []complex128, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zdscaler) Zdscal(n int, alpha float64, x []complex128, incX int) {
	W.WZdscal(n, alpha, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Zgbmver is an interface wrapper for Zgbmver type
type _gonum_org_v1_gonum_blas_testblas_Zgbmver struct {
	WZgbmv func(trans blas.Transpose, m int, n int, kL int, kU int, alpha complex128, ab []complex128, ldab int, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZgemv func(trans blas.Transpose, m int, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zgbmver) Zgbmv(trans blas.Transpose, m int, n int, kL int, kU int, alpha complex128, ab []complex128, ldab int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZgbmv(trans, m, n, kL, kU, alpha, ab, ldab, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_testblas_Zgbmver) Zgemv(trans blas.Transpose, m int, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZgemv(trans, m, n, alpha, a, lda, x, incX, beta, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Zgemmer is an interface wrapper for Zgemmer type
type _gonum_org_v1_gonum_blas_testblas_Zgemmer struct {
	WZgemm func(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zgemmer) Zgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

// _gonum_org_v1_gonum_blas_testblas_Zgemver is an interface wrapper for Zgemver type
type _gonum_org_v1_gonum_blas_testblas_Zgemver struct {
	WZgemv func(trans blas.Transpose, m int, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zgemver) Zgemv(trans blas.Transpose, m int, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZgemv(trans, m, n, alpha, a, lda, x, incX, beta, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Zgercer is an interface wrapper for Zgercer type
type _gonum_org_v1_gonum_blas_testblas_Zgercer struct {
	WZgerc func(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zgercer) Zgerc(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int) {
	W.WZgerc(m, n, alpha, x, incX, y, incY, a, lda)
}

// _gonum_org_v1_gonum_blas_testblas_Zgeruer is an interface wrapper for Zgeruer type
type _gonum_org_v1_gonum_blas_testblas_Zgeruer struct {
	WZgeru func(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zgeruer) Zgeru(m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int) {
	W.WZgeru(m, n, alpha, x, incX, y, incY, a, lda)
}

// _gonum_org_v1_gonum_blas_testblas_Zhbmver is an interface wrapper for Zhbmver type
type _gonum_org_v1_gonum_blas_testblas_Zhbmver struct {
	WZhbmv func(uplo blas.Uplo, n int, k int, alpha complex128, ab []complex128, ldab int, x []complex128, incX int, beta complex128, y []complex128, incY int)
	WZhemv func(uplo blas.Uplo, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zhbmver) Zhbmv(uplo blas.Uplo, n int, k int, alpha complex128, ab []complex128, ldab int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZhbmv(uplo, n, k, alpha, ab, ldab, x, incX, beta, y, incY)
}
func (W _gonum_org_v1_gonum_blas_testblas_Zhbmver) Zhemv(uplo blas.Uplo, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZhemv(uplo, n, alpha, a, lda, x, incX, beta, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Zhemmer is an interface wrapper for Zhemmer type
type _gonum_org_v1_gonum_blas_testblas_Zhemmer struct {
	WZhemm func(side blas.Side, uplo blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zhemmer) Zhemm(side blas.Side, uplo blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZhemm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

// _gonum_org_v1_gonum_blas_testblas_Zhemver is an interface wrapper for Zhemver type
type _gonum_org_v1_gonum_blas_testblas_Zhemver struct {
	WZhemv func(uplo blas.Uplo, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zhemver) Zhemv(uplo blas.Uplo, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZhemv(uplo, n, alpha, a, lda, x, incX, beta, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Zher2er is an interface wrapper for Zher2er type
type _gonum_org_v1_gonum_blas_testblas_Zher2er struct {
	WZher2 func(uplo blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zher2er) Zher2(uplo blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int) {
	W.WZher2(uplo, n, alpha, x, incX, y, incY, a, lda)
}

// _gonum_org_v1_gonum_blas_testblas_Zher2ker is an interface wrapper for Zher2ker type
type _gonum_org_v1_gonum_blas_testblas_Zher2ker struct {
	WZher2k func(uplo blas.Uplo, trans blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta float64, c []complex128, ldc int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zher2ker) Zher2k(uplo blas.Uplo, trans blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta float64, c []complex128, ldc int) {
	W.WZher2k(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

// _gonum_org_v1_gonum_blas_testblas_Zherer is an interface wrapper for Zherer type
type _gonum_org_v1_gonum_blas_testblas_Zherer struct {
	WZher func(uplo blas.Uplo, n int, alpha float64, x []complex128, incX int, a []complex128, lda int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zherer) Zher(uplo blas.Uplo, n int, alpha float64, x []complex128, incX int, a []complex128, lda int) {
	W.WZher(uplo, n, alpha, x, incX, a, lda)
}

// _gonum_org_v1_gonum_blas_testblas_Zherker is an interface wrapper for Zherker type
type _gonum_org_v1_gonum_blas_testblas_Zherker struct {
	WZherk func(uplo blas.Uplo, trans blas.Transpose, n int, k int, alpha float64, a []complex128, lda int, beta float64, c []complex128, ldc int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zherker) Zherk(uplo blas.Uplo, trans blas.Transpose, n int, k int, alpha float64, a []complex128, lda int, beta float64, c []complex128, ldc int) {
	W.WZherk(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

// _gonum_org_v1_gonum_blas_testblas_Zhpmver is an interface wrapper for Zhpmver type
type _gonum_org_v1_gonum_blas_testblas_Zhpmver struct {
	WZhpmv func(uplo blas.Uplo, n int, alpha complex128, ap []complex128, x []complex128, incX int, beta complex128, y []complex128, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zhpmver) Zhpmv(uplo blas.Uplo, n int, alpha complex128, ap []complex128, x []complex128, incX int, beta complex128, y []complex128, incY int) {
	W.WZhpmv(uplo, n, alpha, ap, x, incX, beta, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Zhpr2er is an interface wrapper for Zhpr2er type
type _gonum_org_v1_gonum_blas_testblas_Zhpr2er struct {
	WZhpr2 func(uplo blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, ap []complex128)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zhpr2er) Zhpr2(uplo blas.Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, ap []complex128) {
	W.WZhpr2(uplo, n, alpha, x, incX, y, incY, ap)
}

// _gonum_org_v1_gonum_blas_testblas_Zhprer is an interface wrapper for Zhprer type
type _gonum_org_v1_gonum_blas_testblas_Zhprer struct {
	WZhpr func(uplo blas.Uplo, n int, alpha float64, x []complex128, incX int, ap []complex128)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zhprer) Zhpr(uplo blas.Uplo, n int, alpha float64, x []complex128, incX int, ap []complex128) {
	W.WZhpr(uplo, n, alpha, x, incX, ap)
}

// _gonum_org_v1_gonum_blas_testblas_Zscaler is an interface wrapper for Zscaler type
type _gonum_org_v1_gonum_blas_testblas_Zscaler struct {
	WZscal func(n int, alpha complex128, x []complex128, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zscaler) Zscal(n int, alpha complex128, x []complex128, incX int) {
	W.WZscal(n, alpha, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Zswaper is an interface wrapper for Zswaper type
type _gonum_org_v1_gonum_blas_testblas_Zswaper struct {
	WZswap func(n int, x []complex128, incX int, y []complex128, incY int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zswaper) Zswap(n int, x []complex128, incX int, y []complex128, incY int) {
	W.WZswap(n, x, incX, y, incY)
}

// _gonum_org_v1_gonum_blas_testblas_Zsymmer is an interface wrapper for Zsymmer type
type _gonum_org_v1_gonum_blas_testblas_Zsymmer struct {
	WZsymm func(side blas.Side, uplo blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zsymmer) Zsymm(side blas.Side, uplo blas.Uplo, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZsymm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

// _gonum_org_v1_gonum_blas_testblas_Zsyr2ker is an interface wrapper for Zsyr2ker type
type _gonum_org_v1_gonum_blas_testblas_Zsyr2ker struct {
	WZsyr2k func(uplo blas.Uplo, trans blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zsyr2ker) Zsyr2k(uplo blas.Uplo, trans blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, b []complex128, ldb int, beta complex128, c []complex128, ldc int) {
	W.WZsyr2k(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

// _gonum_org_v1_gonum_blas_testblas_Zsyrker is an interface wrapper for Zsyrker type
type _gonum_org_v1_gonum_blas_testblas_Zsyrker struct {
	WZsyrk func(uplo blas.Uplo, trans blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, beta complex128, c []complex128, ldc int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Zsyrker) Zsyrk(uplo blas.Uplo, trans blas.Transpose, n int, k int, alpha complex128, a []complex128, lda int, beta complex128, c []complex128, ldc int) {
	W.WZsyrk(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

// _gonum_org_v1_gonum_blas_testblas_Ztbmver is an interface wrapper for Ztbmver type
type _gonum_org_v1_gonum_blas_testblas_Ztbmver struct {
	WZtbmv func(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, k int, ab []complex128, ldab int, x []complex128, incX int)
	WZtrmv func(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, a []complex128, lda int, x []complex128, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Ztbmver) Ztbmv(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, k int, ab []complex128, ldab int, x []complex128, incX int) {
	W.WZtbmv(uplo, trans, diag, n, k, ab, ldab, x, incX)
}
func (W _gonum_org_v1_gonum_blas_testblas_Ztbmver) Ztrmv(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtrmv(uplo, trans, diag, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Ztbsver is an interface wrapper for Ztbsver type
type _gonum_org_v1_gonum_blas_testblas_Ztbsver struct {
	WZtbmv func(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, k int, ab []complex128, ldab int, x []complex128, incX int)
	WZtbsv func(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, k int, ab []complex128, ldab int, x []complex128, incX int)
	WZtrmv func(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, a []complex128, lda int, x []complex128, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Ztbsver) Ztbmv(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, k int, ab []complex128, ldab int, x []complex128, incX int) {
	W.WZtbmv(uplo, trans, diag, n, k, ab, ldab, x, incX)
}
func (W _gonum_org_v1_gonum_blas_testblas_Ztbsver) Ztbsv(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, k int, ab []complex128, ldab int, x []complex128, incX int) {
	W.WZtbsv(uplo, trans, diag, n, k, ab, ldab, x, incX)
}
func (W _gonum_org_v1_gonum_blas_testblas_Ztbsver) Ztrmv(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtrmv(uplo, trans, diag, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Ztpmver is an interface wrapper for Ztpmver type
type _gonum_org_v1_gonum_blas_testblas_Ztpmver struct {
	WZtpmv func(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, ap []complex128, x []complex128, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Ztpmver) Ztpmv(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, ap []complex128, x []complex128, incX int) {
	W.WZtpmv(uplo, trans, diag, n, ap, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Ztpsver is an interface wrapper for Ztpsver type
type _gonum_org_v1_gonum_blas_testblas_Ztpsver struct {
	WZtpmv func(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, ap []complex128, x []complex128, incX int)
	WZtpsv func(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, ap []complex128, x []complex128, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Ztpsver) Ztpmv(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, ap []complex128, x []complex128, incX int) {
	W.WZtpmv(uplo, trans, diag, n, ap, x, incX)
}
func (W _gonum_org_v1_gonum_blas_testblas_Ztpsver) Ztpsv(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, ap []complex128, x []complex128, incX int) {
	W.WZtpsv(uplo, trans, diag, n, ap, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Ztrmmer is an interface wrapper for Ztrmmer type
type _gonum_org_v1_gonum_blas_testblas_Ztrmmer struct {
	WZtrmm func(side blas.Side, uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Ztrmmer) Ztrmm(side blas.Side, uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int) {
	W.WZtrmm(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
}

// _gonum_org_v1_gonum_blas_testblas_Ztrmver is an interface wrapper for Ztrmver type
type _gonum_org_v1_gonum_blas_testblas_Ztrmver struct {
	WZtrmv func(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, a []complex128, lda int, x []complex128, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Ztrmver) Ztrmv(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtrmv(uplo, trans, diag, n, a, lda, x, incX)
}

// _gonum_org_v1_gonum_blas_testblas_Ztrsmer is an interface wrapper for Ztrsmer type
type _gonum_org_v1_gonum_blas_testblas_Ztrsmer struct {
	WZtrsm func(side blas.Side, uplo blas.Uplo, transA blas.Transpose, diag blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Ztrsmer) Ztrsm(side blas.Side, uplo blas.Uplo, transA blas.Transpose, diag blas.Diag, m int, n int, alpha complex128, a []complex128, lda int, b []complex128, ldb int) {
	W.WZtrsm(side, uplo, transA, diag, m, n, alpha, a, lda, b, ldb)
}

// _gonum_org_v1_gonum_blas_testblas_Ztrsver is an interface wrapper for Ztrsver type
type _gonum_org_v1_gonum_blas_testblas_Ztrsver struct {
	WZtrmv func(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, a []complex128, lda int, x []complex128, incX int)
	WZtrsv func(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, a []complex128, lda int, x []complex128, incX int)
}

func (W _gonum_org_v1_gonum_blas_testblas_Ztrsver) Ztrmv(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtrmv(uplo, trans, diag, n, a, lda, x, incX)
}
func (W _gonum_org_v1_gonum_blas_testblas_Ztrsver) Ztrsv(uplo blas.Uplo, trans blas.Transpose, diag blas.Diag, n int, a []complex128, lda int, x []complex128, incX int) {
	W.WZtrsv(uplo, trans, diag, n, a, lda, x, incX)
}
