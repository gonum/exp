// Code generated by 'github.com/containous/yaegi/extract gonum.org/v1/gonum/cmplxs'. DO NOT EDIT.

// Copyright Â©2019 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build go1.15,!go1.16

package yaegi

import (
	"reflect"

	"gonum.org/v1/gonum/cmplxs"
)

func init() {
	Symbols["gonum.org/v1/gonum/cmplxs"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abs":          reflect.ValueOf(cmplxs.Abs),
		"Add":          reflect.ValueOf(cmplxs.Add),
		"AddConst":     reflect.ValueOf(cmplxs.AddConst),
		"AddScaled":    reflect.ValueOf(cmplxs.AddScaled),
		"AddScaledTo":  reflect.ValueOf(cmplxs.AddScaledTo),
		"AddTo":        reflect.ValueOf(cmplxs.AddTo),
		"Complex":      reflect.ValueOf(cmplxs.Complex),
		"Count":        reflect.ValueOf(cmplxs.Count),
		"CumProd":      reflect.ValueOf(cmplxs.CumProd),
		"CumSum":       reflect.ValueOf(cmplxs.CumSum),
		"Distance":     reflect.ValueOf(cmplxs.Distance),
		"Div":          reflect.ValueOf(cmplxs.Div),
		"DivTo":        reflect.ValueOf(cmplxs.DivTo),
		"Dot":          reflect.ValueOf(cmplxs.Dot),
		"Equal":        reflect.ValueOf(cmplxs.Equal),
		"EqualApprox":  reflect.ValueOf(cmplxs.EqualApprox),
		"EqualFunc":    reflect.ValueOf(cmplxs.EqualFunc),
		"EqualLengths": reflect.ValueOf(cmplxs.EqualLengths),
		"Find":         reflect.ValueOf(cmplxs.Find),
		"HasNaN":       reflect.ValueOf(cmplxs.HasNaN),
		"Imag":         reflect.ValueOf(cmplxs.Imag),
		"LogSpan":      reflect.ValueOf(cmplxs.LogSpan),
		"MaxAbs":       reflect.ValueOf(cmplxs.MaxAbs),
		"MaxAbsIdx":    reflect.ValueOf(cmplxs.MaxAbsIdx),
		"MinAbs":       reflect.ValueOf(cmplxs.MinAbs),
		"MinAbsIdx":    reflect.ValueOf(cmplxs.MinAbsIdx),
		"Mul":          reflect.ValueOf(cmplxs.Mul),
		"MulTo":        reflect.ValueOf(cmplxs.MulTo),
		"NearestIdx":   reflect.ValueOf(cmplxs.NearestIdx),
		"Norm":         reflect.ValueOf(cmplxs.Norm),
		"Prod":         reflect.ValueOf(cmplxs.Prod),
		"Real":         reflect.ValueOf(cmplxs.Real),
		"Reverse":      reflect.ValueOf(cmplxs.Reverse),
		"Same":         reflect.ValueOf(cmplxs.Same),
		"Scale":        reflect.ValueOf(cmplxs.Scale),
		"ScaleTo":      reflect.ValueOf(cmplxs.ScaleTo),
		"Span":         reflect.ValueOf(cmplxs.Span),
		"Sub":          reflect.ValueOf(cmplxs.Sub),
		"SubTo":        reflect.ValueOf(cmplxs.SubTo),
		"Sum":          reflect.ValueOf(cmplxs.Sum),
	}
}
