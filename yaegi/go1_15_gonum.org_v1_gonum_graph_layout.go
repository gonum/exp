// Code generated by 'github.com/containous/yaegi/extract gonum.org/v1/gonum/graph/layout'. DO NOT EDIT.

// Copyright Â©2019 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build go1.15,!go1.16

package yaegi

import (
	"reflect"

	"gonum.org/v1/gonum/graph"
	"gonum.org/v1/gonum/graph/layout"
	"gonum.org/v1/gonum/spatial/r2"
)

func init() {
	Symbols["gonum.org/v1/gonum/graph/layout"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewOptimizerR2": reflect.ValueOf(layout.NewOptimizerR2),

		// type definitions
		"EadesR2":     reflect.ValueOf((*layout.EadesR2)(nil)),
		"GraphR2":     reflect.ValueOf((*layout.GraphR2)(nil)),
		"IsomapR2":    reflect.ValueOf((*layout.IsomapR2)(nil)),
		"LayoutR2":    reflect.ValueOf((*layout.LayoutR2)(nil)),
		"NodeR2":      reflect.ValueOf((*layout.NodeR2)(nil)),
		"OptimizerR2": reflect.ValueOf((*layout.OptimizerR2)(nil)),

		// interface wrapper definitions
		"_GraphR2":  reflect.ValueOf((*_gonum_org_v1_gonum_graph_layout_GraphR2)(nil)),
		"_LayoutR2": reflect.ValueOf((*_gonum_org_v1_gonum_graph_layout_LayoutR2)(nil)),
	}
}

// _gonum_org_v1_gonum_graph_layout_GraphR2 is an interface wrapper for GraphR2 type
type _gonum_org_v1_gonum_graph_layout_GraphR2 struct {
	WEdge           func(uid int64, vid int64) graph.Edge
	WFrom           func(id int64) graph.Nodes
	WHasEdgeBetween func(xid int64, yid int64) bool
	WLayoutNodeR2   func(id int64) layout.NodeR2
	WNode           func(id int64) graph.Node
	WNodes          func() graph.Nodes
}

func (W _gonum_org_v1_gonum_graph_layout_GraphR2) Edge(uid int64, vid int64) graph.Edge {
	return W.WEdge(uid, vid)
}
func (W _gonum_org_v1_gonum_graph_layout_GraphR2) From(id int64) graph.Nodes { return W.WFrom(id) }
func (W _gonum_org_v1_gonum_graph_layout_GraphR2) HasEdgeBetween(xid int64, yid int64) bool {
	return W.WHasEdgeBetween(xid, yid)
}
func (W _gonum_org_v1_gonum_graph_layout_GraphR2) LayoutNodeR2(id int64) layout.NodeR2 {
	return W.WLayoutNodeR2(id)
}
func (W _gonum_org_v1_gonum_graph_layout_GraphR2) Node(id int64) graph.Node { return W.WNode(id) }
func (W _gonum_org_v1_gonum_graph_layout_GraphR2) Nodes() graph.Nodes       { return W.WNodes() }

// _gonum_org_v1_gonum_graph_layout_LayoutR2 is an interface wrapper for LayoutR2 type
type _gonum_org_v1_gonum_graph_layout_LayoutR2 struct {
	WCoord2        func(id int64) r2.Vec
	WIsInitialized func() bool
	WSetCoord2     func(id int64, coords r2.Vec)
}

func (W _gonum_org_v1_gonum_graph_layout_LayoutR2) Coord2(id int64) r2.Vec { return W.WCoord2(id) }
func (W _gonum_org_v1_gonum_graph_layout_LayoutR2) IsInitialized() bool    { return W.WIsInitialized() }
func (W _gonum_org_v1_gonum_graph_layout_LayoutR2) SetCoord2(id int64, coords r2.Vec) {
	W.WSetCoord2(id, coords)
}
