// Code generated by 'goexports gonum.org/v1/gonum/stat'. DO NOT EDIT.

// Copyright Â©2019 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build go1.14,!go1.15

package yaegi

import (
	"reflect"

	"gonum.org/v1/gonum/stat"
)

func init() {
	Symbols["gonum.org/v1/gonum/stat"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Bhattacharyya":       reflect.ValueOf(stat.Bhattacharyya),
		"BivariateMoment":     reflect.ValueOf(stat.BivariateMoment),
		"CDF":                 reflect.ValueOf(stat.CDF),
		"ChiSquare":           reflect.ValueOf(stat.ChiSquare),
		"CircularMean":        reflect.ValueOf(stat.CircularMean),
		"Correlation":         reflect.ValueOf(stat.Correlation),
		"CorrelationMatrix":   reflect.ValueOf(stat.CorrelationMatrix),
		"Covariance":          reflect.ValueOf(stat.Covariance),
		"CovarianceMatrix":    reflect.ValueOf(stat.CovarianceMatrix),
		"CrossEntropy":        reflect.ValueOf(stat.CrossEntropy),
		"Empirical":           reflect.ValueOf(stat.Empirical),
		"Entropy":             reflect.ValueOf(stat.Entropy),
		"ExKurtosis":          reflect.ValueOf(stat.ExKurtosis),
		"GeometricMean":       reflect.ValueOf(stat.GeometricMean),
		"HarmonicMean":        reflect.ValueOf(stat.HarmonicMean),
		"Hellinger":           reflect.ValueOf(stat.Hellinger),
		"Histogram":           reflect.ValueOf(stat.Histogram),
		"JensenShannon":       reflect.ValueOf(stat.JensenShannon),
		"Kendall":             reflect.ValueOf(stat.Kendall),
		"KolmogorovSmirnov":   reflect.ValueOf(stat.KolmogorovSmirnov),
		"KullbackLeibler":     reflect.ValueOf(stat.KullbackLeibler),
		"LinInterp":           reflect.ValueOf(stat.LinInterp),
		"LinearRegression":    reflect.ValueOf(stat.LinearRegression),
		"Mahalanobis":         reflect.ValueOf(stat.Mahalanobis),
		"Mean":                reflect.ValueOf(stat.Mean),
		"MeanStdDev":          reflect.ValueOf(stat.MeanStdDev),
		"MeanVariance":        reflect.ValueOf(stat.MeanVariance),
		"Mode":                reflect.ValueOf(stat.Mode),
		"Moment":              reflect.ValueOf(stat.Moment),
		"MomentAbout":         reflect.ValueOf(stat.MomentAbout),
		"Quantile":            reflect.ValueOf(stat.Quantile),
		"RNoughtSquared":      reflect.ValueOf(stat.RNoughtSquared),
		"ROC":                 reflect.ValueOf(stat.ROC),
		"RSquared":            reflect.ValueOf(stat.RSquared),
		"RSquaredFrom":        reflect.ValueOf(stat.RSquaredFrom),
		"Skew":                reflect.ValueOf(stat.Skew),
		"SortWeighted":        reflect.ValueOf(stat.SortWeighted),
		"SortWeightedLabeled": reflect.ValueOf(stat.SortWeightedLabeled),
		"StdDev":              reflect.ValueOf(stat.StdDev),
		"StdErr":              reflect.ValueOf(stat.StdErr),
		"StdScore":            reflect.ValueOf(stat.StdScore),
		"Variance":            reflect.ValueOf(stat.Variance),

		// type definitions
		"CC":           reflect.ValueOf((*stat.CC)(nil)),
		"CumulantKind": reflect.ValueOf((*stat.CumulantKind)(nil)),
		"PC":           reflect.ValueOf((*stat.PC)(nil)),
	}
}
